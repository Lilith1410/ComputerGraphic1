/**
 * \file GeometryCoreFactory.cpp
 *
 * \author Volker Ahlers\n
 *         volker.ahlers@hs-hannover.de
 */

/*
 * Copyright 2014-2019 Volker Ahlers
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <cfloat>
#include <fstream>
#include <sstream>
#include <stdexcept>
#include "GeometryCore.h"
#include "GeometryCoreFactory.h"
#include "scg_utilities.h"

namespace scg {


GeometryCoreFactory::GeometryCoreFactory() {
}


GeometryCoreFactory::GeometryCoreFactory(const std::string& filePath){
  addFilePath(filePath);
}


GeometryCoreFactory::~GeometryCoreFactory() {
}


void GeometryCoreFactory::addFilePath(const std::string& filePath) {
  assert(!filePath.empty());
  splitFilePath(filePath, filePaths_);
}


GeometryCoreSP GeometryCoreFactory::createModelFromOBJFile(const std::string& fileName) {

  // read OBJ model
  OBJModel model;
  int error = loadOBJFile_(fileName, model);
  if (error != 0) {
    throw std::runtime_error("cannot open file " + fileName
        + " [GeometryCoreFactory::createModelFromOBJFile()]");
  }

  // create geometry core
  auto core = GeometryCore::create(GL_TRIANGLES, DrawMode::ARRAYS);
  GLfloat* vertices = new GLfloat[3 * 3 * model.nTriangles];
  GLfloat* normals = new GLfloat[3 * 3 * model.nTriangles];
  GLfloat* texCoords = nullptr;
  if (!model.texCoords.empty()) {
    texCoords = new GLfloat[2 * 3 * model.nTriangles];
  }
  int vertIdx = 0;
  int texIdx = 0;
  for (auto face : model.faces) {
    for (int i = 0; i < face.nTriangles; ++i) {
      glm::vec3 faceNormal = glm::normalize(glm::cross(
          (model.vertices[face.entries[i + 1].vertex - 1] - model.vertices[face.entries[0].vertex - 1]),
          (model.vertices[face.entries[i + 2].vertex - 1] - model.vertices[face.entries[0].vertex - 1])));
      memcpy(&vertices[vertIdx], glm::value_ptr(model.vertices[face.entries[0].vertex - 1]), 3 * sizeof(GLfloat));
      if (face.entries[0].normal != 0) {
        memcpy(&normals[vertIdx], glm::value_ptr(model.normals[face.entries[0].normal - 1]), 3 * sizeof(GLfloat));
      }
      else {
        memcpy(&normals[vertIdx], glm::value_ptr(faceNormal), 3 * sizeof(GLfloat));
      }
      vertIdx += 3;
      if (texCoords) {
        if (face.entries[0].texCoord != 0) {
          memcpy(&texCoords[texIdx], glm::value_ptr(model.texCoords[face.entries[0].texCoord - 1]), 2 * sizeof(GLfloat));
        }
        else {
          memcpy(&texCoords[texIdx], glm::value_ptr(glm::vec2()), 2 * sizeof(GLfloat));
        }
        texIdx += 2;
      }
      for (int j = 1; j <= 2; ++j) {
        memcpy(&vertices[vertIdx], glm::value_ptr(model.vertices[face.entries[i + j].vertex - 1]), 3 * sizeof(GLfloat));
        if (face.entries[i + j].normal != 0) {
          memcpy(&normals[vertIdx], glm::value_ptr(model.normals[face.entries[i + j].normal - 1]), 3 * sizeof(GLfloat));
        }
        else {
          memcpy(&normals[vertIdx], glm::value_ptr(faceNormal), 3 * sizeof(GLfloat));
        }
        vertIdx += 3;
        if (texCoords) {
          if (face.entries[i + j].texCoord != 0) {
            memcpy(&texCoords[texIdx], glm::value_ptr(model.texCoords[face.entries[i + j].texCoord - 1]), 2 * sizeof(GLfloat));
          }
          else {
            memcpy(&texCoords[texIdx], glm::value_ptr(glm::vec2()), 2 * sizeof(GLfloat));
          }
          texIdx += 2;
        }
      }
    }
  }
  core->addAttributeData(OGLConstants::VERTEX.location, vertices,
      3 * 3 * model.nTriangles * sizeof(GLfloat), 3, GL_STATIC_DRAW);
  core->addAttributeData(OGLConstants::NORMAL.location, normals,
      3 * 3 * model.nTriangles * sizeof(GLfloat), 3, GL_STATIC_DRAW);
  if (texCoords) {
    core->addAttributeData(OGLConstants::TEX_COORD_0.location, texCoords,
        2 * 3 * model.nTriangles * sizeof(GLfloat), 2, GL_STATIC_DRAW);
  }
  delete [] vertices;
  vertices = nullptr;
  delete [] texCoords;
  texCoords = nullptr;
  delete [] normals;
  normals = nullptr;

  return core;
}


GeometryCoreSP GeometryCoreFactory::createRectangle(glm::vec2 size) {
  // create geometry core
  auto core = GeometryCore::create(GL_TRIANGLES, DrawMode::ELEMENTS);

  // define vertices (rectangle area = size.x x size.y,
  //   4 vertices with indices 0,...,3)
  glm::vec2 halfSize = 0.5f * size;
  const GLfloat vertices[] = {
      -halfSize.x, -halfSize.y,  0.f,
       halfSize.x, -halfSize.y,  0.f,
       halfSize.x,  halfSize.y,  0.f,
      -halfSize.x,  halfSize.y,  0.f
  };
  core->addAttributeData(OGLConstants::VERTEX.location, vertices,
      sizeof(vertices), 3, GL_STATIC_DRAW);

  // define normals
  const GLfloat normals[] = {
      0.f, 0.f, 1.f,
      0.f, 0.f, 1.f,
      0.f, 0.f, 1.f,
      0.f, 0.f, 1.f
  };
  core->addAttributeData(OGLConstants::NORMAL.location, normals,
      sizeof(normals), 3, GL_STATIC_DRAW);

  // define tangents
  const GLfloat tangents[] = {
      1.f, 0.f, 0.f,
      1.f, 0.f, 0.f,
      1.f, 0.f, 0.f,
      1.f, 0.f, 0.f
  };
  core->addAttributeData(OGLConstants::TANGENT.location, tangents,
      sizeof(tangents), 3, GL_STATIC_DRAW);

  // define binormals
  const GLfloat binormals[] = {
      0.f, 1.f, 0.f,
      0.f, 1.f, 0.f,
      0.f, 1.f, 0.f,
      0.f, 1.f, 0.f
  };
  core->addAttributeData(OGLConstants::BINORMAL.location, binormals,
      sizeof(binormals), 3, GL_STATIC_DRAW);

  // define texture coordinates
  const GLfloat texCoords[] = {
       0.f, 0.f,
       1.f, 0.f,
       1.f, 1.f,
       0.f, 1.f
  };
  core->addAttributeData(OGLConstants::TEX_COORD_0.location, texCoords,
      sizeof(texCoords), 2, GL_STATIC_DRAW);

  // define indices (1 face * 2 triangles -> 2 triangles)
  const GLuint indices[] = {
      0, 1, 3,
      1, 2, 3
  };
  core->setElementIndexData(indices, sizeof(indices), GL_STATIC_DRAW);

  return core;
}


GeometryCoreSP GeometryCoreFactory::createCube(GLfloat size) {
  return createCuboid(glm::vec3(size, size, size));
}


GeometryCoreSP GeometryCoreFactory::createCuboid(glm::vec3 size) {
  // create geometry core
  auto core = GeometryCore::create(GL_TRIANGLES, DrawMode::ELEMENTS);

  // define vertices (cuboid volume = size.x * size.y * size.z,
  //   6 * 4 = 24 vertices)
  glm::vec3 halfSize = 0.5f * size;
  const GLfloat vertices[] = {
      -halfSize.x, -halfSize.y,  halfSize.z,  // front face
       halfSize.x, -halfSize.y,  halfSize.z,
       halfSize.x,  halfSize.y,  halfSize.z,
      -halfSize.x,  halfSize.y,  halfSize.z,
       halfSize.x, -halfSize.y, -halfSize.z,  // rear face
      -halfSize.x, -halfSize.y, -halfSize.z,
      -halfSize.x,  halfSize.y, -halfSize.z,
       halfSize.x,  halfSize.y, -halfSize.z,
      -halfSize.x, -halfSize.y, -halfSize.z,  // left face
      -halfSize.x, -halfSize.y,  halfSize.z,
      -halfSize.x,  halfSize.y,  halfSize.z,
      -halfSize.x,  halfSize.y, -halfSize.z,
       halfSize.x, -halfSize.y,  halfSize.z,  // right face
       halfSize.x, -halfSize.y, -halfSize.z,
       halfSize.x,  halfSize.y, -halfSize.z,
       halfSize.x,  halfSize.y,  halfSize.z,
      -halfSize.x,  halfSize.y,  halfSize.z,  // top face
       halfSize.x,  halfSize.y,  halfSize.z,
       halfSize.x,  halfSize.y, -halfSize.z,
      -halfSize.x,  halfSize.y, -halfSize.z,
      -halfSize.x, -halfSize.y, -halfSize.z,  // bottom face
       halfSize.x, -halfSize.y, -halfSize.z,
       halfSize.x, -halfSize.y,  halfSize.z,
      -halfSize.x, -halfSize.y,  halfSize.z
  };
  core->addAttributeData(OGLConstants::VERTEX.location, vertices,
      sizeof(vertices), 3, GL_STATIC_DRAW);

  // define normals
  const GLfloat normals[] = {
       0.f,  0.f,  1.f,  // front face
       0.f,  0.f,  1.f,
       0.f,  0.f,  1.f,
       0.f,  0.f,  1.f,
       0.f,  0.f, -1.f,  // rear face ...
       0.f,  0.f, -1.f,
       0.f,  0.f, -1.f,
       0.f,  0.f, -1.f,
      -1.f,  0.f,  0.f,
      -1.f,  0.f,  0.f,
      -1.f,  0.f,  0.f,
      -1.f,  0.f,  0.f,
       1.f,  0.f,  0.f,
       1.f,  0.f,  0.f,
       1.f,  0.f,  0.f,
       1.f,  0.f,  0.f,
       0.f,  1.f,  0.f,
       0.f,  1.f,  0.f,
       0.f,  1.f,  0.f,
       0.f,  1.f,  0.f,
       0.f, -1.f,  0.f,
       0.f, -1.f,  0.f,
       0.f, -1.f,  0.f,
       0.f, -1.f,  0.f
  };
  core->addAttributeData(OGLConstants::NORMAL.location, normals,
      sizeof(normals), 3, GL_STATIC_DRAW);

  // define tangents
  const GLfloat tangents[] = {
      1.f,  0.f,  0.f,  // front face
      1.f,  0.f,  0.f,
      1.f,  0.f,  0.f,
      1.f,  0.f,  0.f,
     -1.f,  0.f,  0.f,  // rear face ...
     -1.f,  0.f,  0.f,
     -1.f,  0.f,  0.f,
     -1.f,  0.f,  0.f,
      0.f,  0.f,  1.f,
      0.f,  0.f,  1.f,
      0.f,  0.f,  1.f,
      0.f,  0.f,  1.f,
      0.f,  0.f, -1.f,
      0.f,  0.f, -1.f,
      0.f,  0.f, -1.f,
      0.f,  0.f, -1.f,
      1.f,  0.f,  0.f,
      1.f,  0.f,  0.f,
      1.f,  0.f,  0.f,
      1.f,  0.f,  0.f,
     -1.f,  0.f,  0.f,
     -1.f,  0.f,  0.f,
     -1.f,  0.f,  0.f,
     -1.f,  0.f,  0.f
  };
  core->addAttributeData(OGLConstants::TANGENT.location, tangents,
      sizeof(tangents), 3, GL_STATIC_DRAW);

  // define binormals
  const GLfloat binormals[] = {
      0.f,  1.f,  0.f,  // front face
      0.f,  1.f,  0.f,
      0.f,  1.f,  0.f,
      0.f,  1.f,  0.f,
      0.f,  1.f,  0.f,  // rear face ...
      0.f,  1.f,  0.f,
      0.f,  1.f,  0.f,
      0.f,  1.f,  0.f,
      0.f,  1.f,  0.f,
      0.f,  1.f,  0.f,
      0.f,  1.f,  0.f,
      0.f,  1.f,  0.f,
      0.f,  1.f,  0.f,
      0.f,  1.f,  0.f,
      0.f,  1.f,  0.f,
      0.f,  1.f,  0.f,
      0.f,  0.f, -1.f,
      0.f,  0.f, -1.f,
      0.f,  0.f, -1.f,
      0.f,  0.f, -1.f,
      0.f,  0.f, -1.f,
      0.f,  0.f, -1.f,
      0.f,  0.f, -1.f,
      0.f,  0.f, -1.f
  };
  core->addAttributeData(OGLConstants::BINORMAL.location, binormals,
      sizeof(binormals), 3, GL_STATIC_DRAW);

  // define texture coordinates
  const GLfloat texCoords[] = {
       0.f, 0.f,  // front face
       1.f, 0.f,
       1.f, 1.f,
       0.f, 1.f,
       0.f, 0.f,  // rear face ...
       1.f, 0.f,
       1.f, 1.f,
       0.f, 1.f,
       0.f, 0.f,
       1.f, 0.f,
       1.f, 1.f,
       0.f, 1.f,
       0.f, 0.f,
       1.f, 0.f,
       1.f, 1.f,
       0.f, 1.f,
       0.f, 0.f,
       1.f, 0.f,
       1.f, 1.f,
       0.f, 1.f,
       0.f, 0.f,
       1.f, 0.f,
       1.f, 1.f,
       0.f, 1.f
  };
  core->addAttributeData(OGLConstants::TEX_COORD_0.location, texCoords,
      sizeof(texCoords), 2, GL_STATIC_DRAW);

  // define indices (6 faces * 2 triangles -> 12 triangles)
  const GLuint indices[] = {
       0,  1,  3,  // front face
       1,  2,  3,
       4,  5,  7,  // rear face ...
       5,  6,  7,
       8,  9, 11,
       9, 10, 11,
      12, 13, 15,
      13, 14, 15,
      16, 17, 19,
      17, 18, 19,
      20, 21, 23,
      21, 22, 23
  };
  core->setElementIndexData(indices, sizeof(indices), GL_STATIC_DRAW);

  return core;
}


GeometryCoreSP GeometryCoreFactory::createSphere(GLfloat radius, int nSlices, int nStacks) {

  // create geometry core
  auto core = GeometryCore::create(GL_TRIANGLES, DrawMode::ELEMENTS);

  // define vertices, normals, and texture coordinates
  int nVertices = (nStacks + 1) * (nSlices + 1);
  GLfloat* vertices = new GLfloat[3 * nVertices];
  GLfloat* normals = new GLfloat[3 * nVertices];
  GLfloat* tangents = new GLfloat[3 * nVertices];
  GLfloat* binormals = new GLfloat[3 * nVertices];
  GLfloat* texCoords = new GLfloat[2 * nVertices];

  // stack i starts at i * stackOffset (i = 0, 1, ..., nStacks - 1)
  int stackOffset = nSlices + 1;    // number of vertices per stack edge
  float dPhi = 2.f * PI / nSlices;  // longitude angle step
  float dS = 1.f / nSlices;         // texture coordinate s step
  float dTheta = PI / nStacks;      // latitude angle step
  float dT = 1.f / nStacks;         // texture coordinate t step
  for (int i = 0; i <= nStacks; ++i) {
    GLfloat cosTheta = cos(i * dTheta);
    GLfloat sinTheta = sin(i * dTheta);
    for (int j = 0; j <= nSlices; ++j) {
      GLfloat cosPhi = cos(j * dPhi);
      GLfloat sinPhi = sin(j * dPhi);

      int vertIdx = 3 * (i * stackOffset + j);
      assert(vertIdx + 2 < 3 * nVertices);

      vertices[vertIdx] = radius * cosPhi * sinTheta;       // x
      vertices[vertIdx + 1] = radius * sinPhi * sinTheta;   // y
      vertices[vertIdx + 2] = radius * cosTheta;            // z

      normals[vertIdx] = cosPhi * sinTheta;       // x
      normals[vertIdx + 1] = sinPhi * sinTheta;   // y
      normals[vertIdx + 2] = cosTheta;            // z

      tangents[vertIdx] = -sinPhi;        // x
      tangents[vertIdx + 1] = cosPhi;     // y
      tangents[vertIdx + 2] = 0.f;        // z

      binormals[vertIdx] = -cosPhi * cosTheta;      // x
      binormals[vertIdx + 1] = -sinPhi * cosTheta;  // y
      binormals[vertIdx + 2] = sinTheta;            // z

      int texIdx = 2 * (i * stackOffset + j);
      assert(texIdx + 1 < 2 * nVertices);

      texCoords[texIdx] = j * dS;             // s
      texCoords[texIdx + 1] = 1.f - i * dT;   // t
    }
  }

  core->addAttributeData(OGLConstants::VERTEX.location, vertices,
      3 * nVertices * sizeof(GLfloat), 3, GL_STATIC_DRAW);
  core->addAttributeData(OGLConstants::NORMAL.location, normals,
      3 * nVertices * sizeof(GLfloat), 3, GL_STATIC_DRAW);
  core->addAttributeData(OGLConstants::TANGENT.location, tangents,
      3 * nVertices * sizeof(GLfloat), 3, GL_STATIC_DRAW);
  core->addAttributeData(OGLConstants::BINORMAL.location, binormals,
      3 * nVertices * sizeof(GLfloat), 3, GL_STATIC_DRAW);
  core->addAttributeData(OGLConstants::TEX_COORD_0.location, texCoords,
      2 * nVertices * sizeof(GLfloat), 2, GL_STATIC_DRAW);

  // define indices
  int nTriangles = 2 * nSlices * nStacks;
  GLuint* indices = new GLuint[3 * nTriangles];

  for (int i = 0; i < nStacks; ++i) {
    for (int j = 0; j < nSlices; ++j) {
      int faceIdx = 6 * (i * nSlices + j);
      int vertIdx1 = i * stackOffset + j;
      int vertIdx2 = (i + 1) * stackOffset + j;
      assert(faceIdx + 5 < 3 * nTriangles);
      assert(vertIdx1 + 1 < 3 * nVertices);
      assert(vertIdx2 + 1 < 3 * nVertices);

      indices[faceIdx] = vertIdx1;
      indices[faceIdx + 1] = vertIdx1 + 1;
      indices[faceIdx + 2] = vertIdx2;
      indices[faceIdx + 3] = vertIdx1 + 1;
      indices[faceIdx + 4] = vertIdx2 + 1;
      indices[faceIdx + 5] = vertIdx2;
    }
  }
  core->setElementIndexData(indices, 3 * nTriangles * sizeof(GLuint), GL_STATIC_DRAW);

  delete [] vertices;
  vertices = nullptr;
  delete [] normals;
  normals = nullptr;
  delete [] tangents;
  tangents = nullptr;
  delete [] binormals;
  binormals = nullptr;
  delete [] texCoords;
  texCoords = nullptr;
  delete [] indices;
  indices = nullptr;

  return core;
}


GeometryCoreSP GeometryCoreFactory::createCone(GLfloat radius, GLfloat height,
    int nSlices, int nStacks, bool hasCap) {
  return createConicalFrustum(radius, 0.f, height, nSlices, nStacks, hasCap);
}


GeometryCoreSP GeometryCoreFactory::createCylinder(GLfloat radius, GLfloat height,
    int nSlices, int nStacks, bool hasCaps) {
  return createConicalFrustum(radius, radius, height, nSlices, nStacks, hasCaps);
}


GeometryCoreSP GeometryCoreFactory::createConicalFrustum(GLfloat baseRadius, GLfloat topRadius,
    GLfloat height, int nSlices, int nStacks, bool hasCaps) {

  // check dimensions
  assert(topRadius <= baseRadius + FLT_EPSILON);
  bool hasTopCap = hasCaps && (topRadius > FLT_EPSILON);

  // create geometry core
  auto core = GeometryCore::create(GL_TRIANGLES, DrawMode::ELEMENTS);

  // define vertices, normals, and texture coordinates
  int nVertices = (nSlices + 1) * (nStacks + 1)
      + (hasCaps ? nSlices + 2 : 0)
      + (hasTopCap ? nSlices + 2 : 0);
  GLfloat* vertices = new GLfloat[3 * nVertices];
  GLfloat* normals = new GLfloat[3 * nVertices];
  GLfloat* tangents = new GLfloat[3 * nVertices];
  GLfloat* binormals = new GLfloat[3 * nVertices];
  GLfloat* texCoords = new GLfloat[2 * nVertices];

  // stack i starts at i * stackOffset
  // baseCap starts at (nStacks + 1) * stackOffset
  // topCap starts at (nStacks + 1) * stackOffset + capOffset
  int stackOffset = nSlices + 1;    // number of vertices per stack edge
  int capOffset = nSlices + 2;      // number of vertices per cap
  GLfloat halfHeight = 0.5f * height;
  float dPhi = 2.f * PI / nSlices;  // angle step
  float dS = 1.f / nSlices;         // texture coordinate s step
  GLfloat tanTheta = (baseRadius - topRadius) / height;
  float theta = atan(tanTheta);     // angle of lateral surface
  GLfloat cosTheta = cos(theta);
  GLfloat sinTheta = sin(theta);
  float dZ = height / nStacks;      // z coordinate step
  float dT = 1.f / nStacks;         // texture coordinate t step
  for (int i = 0; i <= nStacks; ++i) {
    GLfloat currRadius = topRadius + (height - i * dZ) * tanTheta;
    for (int j = 0; j <= nSlices; ++j) {
      GLfloat cosPhi = cos(j * dPhi);
      GLfloat sinPhi = sin(j * dPhi);

      int vertIdx = 3 * (i * stackOffset + j);
      assert(vertIdx + 2 < 3 * nVertices);

      vertices[vertIdx] = currRadius * cosPhi;       // x
      vertices[vertIdx + 1] = currRadius * sinPhi;   // y
      vertices[vertIdx + 2] = -halfHeight + i * dZ;  // z

      normals[vertIdx] = cosPhi * cosTheta;       // x
      normals[vertIdx + 1] = sinPhi * cosTheta;   // y
      normals[vertIdx + 2] = sinTheta;            // z

      tangents[vertIdx] = -sinPhi;        // x
      tangents[vertIdx + 1] = cosPhi;     // y
      tangents[vertIdx + 2] = 0.f;        // z

      binormals[vertIdx] = -cosPhi * sinTheta;      // x
      binormals[vertIdx + 1] = -sinPhi * sinTheta;  // y
      binormals[vertIdx + 2] = cosTheta;            // z

      int texIdx = 2 * (i * stackOffset + j);
      assert(texIdx + 1 < 2 * nVertices);

      texCoords[texIdx] = j * dS;       // s
      texCoords[texIdx + 1] = i * dT;   // t
    }
  }

  if (hasCaps) {
    for (int i = 0; i <= nSlices; ++i) {
      GLfloat cosPhi = cos(i * dPhi);
      GLfloat sinPhi = sin(i * dPhi);

      // base cap
      int vertIdx = 3 * ((nStacks + 1) * stackOffset + i);
      assert(vertIdx + 2 < 3 * nVertices);

      vertices[vertIdx] = baseRadius * cosPhi;         // x
      vertices[vertIdx + 1] = baseRadius * sinPhi;     // y
      vertices[vertIdx + 2] = -halfHeight;             // z

      normals[vertIdx] = 0.f;        // x
      normals[vertIdx + 1] = 0.f;    // y
      normals[vertIdx + 2] = -1.f;   // z

      tangents[vertIdx] = 1.f;       // x
      tangents[vertIdx + 1] = 0.f;   // y
      tangents[vertIdx + 2] = 0.f;   // z

      binormals[vertIdx] = 0.f;      // x
      binormals[vertIdx + 1] = -1.f; // y
      binormals[vertIdx + 2] = 0.f;  // z

      int texIdx = 2 * ((nStacks + 1) * stackOffset + i);
      assert(texIdx + 1 < 2 * nVertices);

      texCoords[texIdx] = 0.5f;       // s
      texCoords[texIdx + 1] = 0.5f;   // t

      // top cap
      if (hasTopCap) {
        int vertIdx = 3 * ((nStacks + 1) * stackOffset + capOffset + i);
        assert(vertIdx + 2 < 3 * nVertices);

        vertices[vertIdx] = baseRadius * cosPhi;         // x
        vertices[vertIdx + 1] = baseRadius * sinPhi;     // y
        vertices[vertIdx + 2] = halfHeight;              // z

        normals[vertIdx] = 0.f;        // x
        normals[vertIdx + 1] = 0.f;    // y
        normals[vertIdx + 2] = 1.f;    // z

        tangents[vertIdx] = 1.f;       // x
        tangents[vertIdx + 1] = 0.f;   // y
        tangents[vertIdx + 2] = 0.f;   // z

        binormals[vertIdx] = 0.f;      // x
        binormals[vertIdx + 1] = 1.f;  // y
        binormals[vertIdx + 2] = 0.f;  // z

        int texIdx = 2 * ((nStacks + 1) * stackOffset + capOffset + i);
        assert(texIdx + 1 < 2 * nVertices);

        texCoords[texIdx] = 0.5f;       // s
        texCoords[texIdx + 1] = 0.5f;   // t
      }
    }
  }

  if (hasCaps) {
    // base cap center
    int vertIdx = 3 * ((nStacks + 1) * stackOffset + stackOffset);
    assert(vertIdx + 2 < 3 * nVertices);

    vertices[vertIdx] = 0.f;               // x
    vertices[vertIdx + 1] = 0.f;           // y
    vertices[vertIdx + 2] = -halfHeight;   // z

    normals[vertIdx] = 0.f;        // x
    normals[vertIdx + 1] = 0.f;    // y
    normals[vertIdx + 2] = -1.f;   // z

    tangents[vertIdx] = 1.f;       // x
    tangents[vertIdx + 1] = 0.f;   // y
    tangents[vertIdx + 2] = 0.f;   // z

    binormals[vertIdx] = 0.f;      // x
    binormals[vertIdx + 1] = -1.f; // y
    binormals[vertIdx + 2] = 0.f;  // z

    int texIdx = 2 * ((nStacks + 1) * stackOffset + stackOffset);
    assert(texIdx + 1 < 2 * nVertices);

    texCoords[texIdx] = 0.5f;      // s
    texCoords[texIdx + 1] = 0.5f;  // t

    if (hasTopCap) {
      // top cap center
      int vertIdx = 3 * ((nStacks + 1) * stackOffset + capOffset + stackOffset);
      assert(vertIdx + 2 < 3 * nVertices);

      vertices[vertIdx] = 0.f;               // x
      vertices[vertIdx + 1] = 0.f;           // y
      vertices[vertIdx + 2] = halfHeight;    // z

      normals[vertIdx] = 0.f;        // x
      normals[vertIdx + 1] = 0.f;    // y
      normals[vertIdx + 2] = 1.f;     // z

      tangents[vertIdx] = 1.f;       // x
      tangents[vertIdx + 1] = 0.f;   // y
      tangents[vertIdx + 2] = 0.f;   // z

      binormals[vertIdx] = 0.f;      // x
      binormals[vertIdx + 1] = 1.f;  // y
      binormals[vertIdx + 2] = 0.f;  // z

      int texIdx = 2 * ((nStacks + 1) * stackOffset + capOffset + stackOffset);
      assert(texIdx + 1 < 2 * nVertices);

      texCoords[texIdx] = 0.5f;      // s
      texCoords[texIdx + 1] = 0.5f;  // t
    }
  }

  core->addAttributeData(OGLConstants::VERTEX.location, vertices,
      3 * nVertices * sizeof(GLfloat), 3, GL_STATIC_DRAW);
  core->addAttributeData(OGLConstants::NORMAL.location, normals,
      3 * nVertices * sizeof(GLfloat), 3, GL_STATIC_DRAW);
  core->addAttributeData(OGLConstants::TANGENT.location, tangents,
      3 * nVertices * sizeof(GLfloat), 3, GL_STATIC_DRAW);
  core->addAttributeData(OGLConstants::BINORMAL.location, binormals,
      3 * nVertices * sizeof(GLfloat), 3, GL_STATIC_DRAW);
  core->addAttributeData(OGLConstants::TEX_COORD_0.location, texCoords,
      2 * nVertices * sizeof(GLfloat), 2, GL_STATIC_DRAW);

  // define indices
  int nTriangles = 2 * nSlices * nStacks
      + (hasCaps ? nSlices : 0)
      + (hasTopCap ? nSlices : 0);
  GLuint* indices = new GLuint[3 * nTriangles];

  for (int i = 0; i < nStacks; ++i) {
    for (int j = 0; j < nSlices; ++j) {
      int faceIdx = 6 * (i * nSlices + j);
      int vertIdx1 = i * stackOffset + j;
      int vertIdx2 = (i + 1) * stackOffset + j;
      assert(faceIdx + 5 < 3 * nTriangles);
      assert(vertIdx1 + 1 < 3 * nVertices);
      assert(vertIdx2 + 1 < 3 * nVertices);

      indices[faceIdx] = vertIdx1;
      indices[faceIdx + 1] = vertIdx1 + 1;
      indices[faceIdx + 2] = vertIdx2;
      indices[faceIdx + 3] = vertIdx1 + 1;
      indices[faceIdx + 4] = vertIdx2 + 1;
      indices[faceIdx + 5] = vertIdx2;
    }
  }

  if (hasCaps) {
    for (int i = 0; i < nSlices; ++i) {
      // base cap
      int faceIdx = 3 * (2 * nStacks * nSlices + i);
      int vertIdx1 = (nStacks + 1) * stackOffset + stackOffset;   // center point
      int vertIdx2 = (nStacks + 1) * stackOffset + i;
      assert(faceIdx + 2 < 3 * nTriangles);
      assert(vertIdx1 + 1 < 3 * nVertices);
      assert(vertIdx2 + 1 < 3 * nVertices);

      indices[faceIdx] = vertIdx1;
      indices[faceIdx + 1] = vertIdx2 + 1;
      indices[faceIdx + 2] = vertIdx2;

      if (hasTopCap) {
        // top cap
        int faceIdx = 3 * (2 * nStacks * nSlices + nSlices + i);
        int vertIdx1 = (nStacks + 1) * stackOffset + capOffset + i;
        int vertIdx2 = (nStacks + 1) * stackOffset + capOffset + stackOffset;   // center point
        assert(faceIdx + 2 < 3 * nTriangles);
        assert(vertIdx1 + 1 < 3 * nVertices);
        assert(vertIdx2 + 1 < 3 * nVertices);

        indices[faceIdx] = vertIdx1;
        indices[faceIdx + 1] = vertIdx1 + 1;
        indices[faceIdx + 2] = vertIdx2;
      }
    }
  }
  core->setElementIndexData(indices, 3 * nTriangles * sizeof(GLuint), GL_STATIC_DRAW);

  delete [] vertices;
  vertices = nullptr;
  delete [] normals;
  normals = nullptr;
  delete [] tangents;
  tangents = nullptr;
  delete [] binormals;
  binormals = nullptr;
  delete [] texCoords;
  texCoords = nullptr;
  delete [] indices;
  indices = nullptr;

  return core;
}





GeometryCoreSP GeometryCoreFactory::createTeapotFlat(GLfloat size) {
  // create geometry core
  auto core = GeometryCore::create(GL_TRIANGLES, DrawMode::ARRAYS);

  // define vertices (800 vertices)
  GLfloat vertices[] = {
      17.83489990234375, 0, 30.573999404907227, 16.452699661254883, -7.000179767608643, 30.573999404907227, 16.223100662231445, -6.902520179748535, 31.51460075378418, 17.586000442504883, 0, 31.51460075378418, 16.48940086364746, -7.015810012817383, 31.828100204467773, 17.87470054626465, 0, 31.828100204467773, 17.031099319458008, -7.246280193328857, 31.51460075378418, 18.46190071105957, 0, 31.51460075378418, 17.62779998779297, -7.500199794769287, 30.573999404907227, 19.108800888061523, 0, 30.573999404907227, 12.662699699401855, -12.662699699401855, 30.573999404907227, 12.486100196838379, -12.486100196838379, 31.51460075378418, 12.690999984741211, -12.690999984741211, 31.828100204467773, 13.10789966583252, -13.10789966583252, 31.51460075378418, 13.56719970703125, -13.56719970703125, 30.573999404907227, 7.000179767608643, -16.452699661254883, 30.573999404907227, 6.902520179748535, -16.223100662231445, 31.51460075378418, 7.015810012817383, -16.48940086364746, 31.828100204467773, 7.246280193328857, -17.031099319458008, 31.51460075378418, 7.500199794769287, -17.62779998779297, 30.573999404907227, 0, -17.83489990234375, 30.573999404907227, 0, -17.586000442504883, 31.51460075378418, 0, -17.87470054626465, 31.828100204467773, 0, -18.46190071105957, 31.51460075378418, 0, -19.108800888061523, 30.573999404907227, 0, -17.83489990234375, 30.573999404907227, -7.483870029449463, -16.452699661254883, 30.573999404907227, -7.106579780578613, -16.223100662231445, 31.51460075378418, 0, -17.586000442504883, 31.51460075378418, -7.07627010345459, -16.48940086364746, 31.828100204467773, 0, -17.87470054626465, 31.828100204467773, -7.25383996963501, -17.031099319458008, 31.51460075378418, 0, -18.46190071105957, 31.51460075378418, -7.500199794769287, -17.62779998779297, 30.573999404907227, 0, -19.108800888061523, 30.573999404907227, -13.092700004577637, -12.662699699401855, 30.573999404907227, -12.667499542236328, -12.486100196838379, 31.51460075378418, -12.744799613952637, -12.690999984741211, 31.828100204467773, -13.11460018157959, -13.10789966583252, 31.51460075378418, -13.56719970703125, -13.56719970703125, 30.573999404907227, -16.61389923095703, -7.000179767608643, 30.573999404907227, -16.291099548339844, -6.902520179748535, 31.51460075378418, -16.50950050354004, -7.015810012817383, 31.828100204467773, -17.033599853515625, -7.246280193328857, 31.51460075378418, -17.62779998779297, -7.500199794769287, 30.573999404907227, -17.83489990234375, 0, 30.573999404907227, -17.586000442504883, 0, 31.51460075378418, -17.87470054626465, 0, 31.828100204467773, -18.46190071105957, 0, 31.51460075378418, -19.108800888061523, 0, 30.573999404907227, -17.83489990234375, 0, 30.573999404907227, -16.452699661254883, 7.000179767608643, 30.573999404907227, -16.223100662231445, 6.902520179748535, 31.51460075378418, -17.586000442504883, 0, 31.51460075378418, -16.48940086364746, 7.015810012817383, 31.828100204467773, -17.87470054626465, 0, 31.828100204467773, -17.031099319458008, 7.246280193328857, 31.51460075378418, -18.46190071105957, 0, 31.51460075378418, -17.62779998779297, 7.500199794769287, 30.573999404907227, -19.108800888061523, 0, 30.573999404907227, -12.662699699401855, 12.662699699401855, 30.573999404907227, -12.486100196838379, 12.486100196838379, 31.51460075378418, -12.690999984741211, 12.690999984741211, 31.828100204467773, -13.10789966583252, 13.10789966583252, 31.51460075378418, -13.56719970703125, 13.56719970703125, 30.573999404907227, -7.000179767608643, 16.452699661254883, 30.573999404907227, -6.902520179748535, 16.223100662231445, 31.51460075378418, -7.015810012817383, 16.48940086364746, 31.828100204467773, -7.246280193328857, 17.031099319458008, 31.51460075378418, -7.500199794769287, 17.62779998779297, 30.573999404907227, 0, 17.83489990234375, 30.573999404907227, 0, 17.586000442504883, 31.51460075378418, 0, 17.87470054626465, 31.828100204467773, 0, 18.46190071105957, 31.51460075378418, 0, 19.108800888061523, 30.573999404907227, 0, 17.83489990234375, 30.573999404907227, 7.000179767608643, 16.452699661254883, 30.573999404907227, 6.902520179748535, 16.223100662231445, 31.51460075378418, 0, 17.586000442504883, 31.51460075378418, 7.015810012817383, 16.48940086364746, 31.828100204467773, 0, 17.87470054626465, 31.828100204467773, 7.246280193328857, 17.031099319458008, 31.51460075378418, 0, 18.46190071105957, 31.51460075378418, 7.500199794769287, 17.62779998779297, 30.573999404907227, 0, 19.108800888061523, 30.573999404907227, 12.662699699401855, 12.662699699401855, 30.573999404907227, 12.486100196838379, 12.486100196838379, 31.51460075378418, 12.690999984741211, 12.690999984741211, 31.828100204467773, 13.10789966583252, 13.10789966583252, 31.51460075378418, 13.56719970703125, 13.56719970703125, 30.573999404907227, 16.452699661254883, 7.000179767608643, 30.573999404907227, 16.223100662231445, 6.902520179748535, 31.51460075378418, 16.48940086364746, 7.015810012817383, 31.828100204467773, 17.031099319458008, 7.246280193328857, 31.51460075378418, 17.62779998779297, 7.500199794769287, 30.573999404907227, 17.83489990234375, 0, 30.573999404907227, 17.586000442504883, 0, 31.51460075378418, 17.87470054626465, 0, 31.828100204467773, 18.46190071105957, 0, 31.51460075378418, 19.108800888061523, 0, 30.573999404907227, 19.108800888061523, 0, 30.573999404907227, 17.62779998779297, -7.500199794769287, 30.573999404907227, 19.785400390625, -8.418190002441406, 25.572900772094727, 21.447599411010742, 0, 25.572900772094727, 21.667600631713867, -9.218990325927734, 20.661399841308594, 23.487899780273438, 0, 20.661399841308594, 22.99880027770996, -9.785409927368164, 15.928999900817871, 24.930999755859375, 0, 15.928999900817871, 23.503799438476562, -10.000300407409668, 11.465299606323242, 25.4783992767334, 0, 11.465299606323242, 13.56719970703125, -13.56719970703125, 30.573999404907227, 15.227800369262695, -15.227800369262695, 25.572900772094727, 16.67639923095703, -16.67639923095703, 20.661399841308594, 17.701000213623047, -17.701000213623047, 15.928999900817871, 18.089599609375, -18.089599609375, 11.465299606323242, 7.500199794769287, -17.62779998779297, 30.573999404907227, 8.418190002441406, -19.785400390625, 25.572900772094727, 9.218990325927734, -21.667600631713867, 20.661399841308594, 9.785409927368164, -22.99880027770996, 15.928999900817871, 10.000300407409668, -23.503799438476562, 11.465299606323242, 0, -19.108800888061523, 30.573999404907227, 0, -21.447599411010742, 25.572900772094727, 0, -23.487899780273438, 20.661399841308594, 0, -24.930999755859375, 15.928999900817871, 0, -25.4783992767334, 11.465299606323242, 0, -19.108800888061523, 30.573999404907227, -7.500199794769287, -17.62779998779297, 30.573999404907227, -8.418190002441406, -19.785400390625, 25.572900772094727, 0, -21.447599411010742, 25.572900772094727, -9.218990325927734, -21.667600631713867, 20.661399841308594, 0, -23.487899780273438, 20.661399841308594, -9.785409927368164, -22.99880027770996, 15.928999900817871, 0, -24.930999755859375, 15.928999900817871, -10.000300407409668, -23.503799438476562, 11.465299606323242, 0, -25.4783992767334, 11.465299606323242, -13.56719970703125, -13.56719970703125, 30.573999404907227, -15.227800369262695, -15.227800369262695, 25.572900772094727, -16.67639923095703, -16.67639923095703, 20.661399841308594, -17.701000213623047, -17.701000213623047, 15.928999900817871, -18.089599609375, -18.089599609375, 11.465299606323242, -17.62779998779297, -7.500199794769287, 30.573999404907227, -19.785400390625, -8.418190002441406, 25.572900772094727, -21.667600631713867, -9.218990325927734, 20.661399841308594, -22.99880027770996, -9.785409927368164, 15.928999900817871, -23.503799438476562, -10.000300407409668, 11.465299606323242, -19.108800888061523, 0, 30.573999404907227, -21.447599411010742, 0, 25.572900772094727, -23.487899780273438, 0, 20.661399841308594, -24.930999755859375, 0, 15.928999900817871, -25.4783992767334, 0, 11.465299606323242, -19.108800888061523, 0, 30.573999404907227, -17.62779998779297, 7.500199794769287, 30.573999404907227, -19.785400390625, 8.418190002441406, 25.572900772094727, -21.447599411010742, 0, 25.572900772094727, -21.667600631713867, 9.218990325927734, 20.661399841308594, -23.487899780273438, 0, 20.661399841308594, -22.99880027770996, 9.785409927368164, 15.928999900817871, -24.930999755859375, 0, 15.928999900817871, -23.503799438476562, 10.000300407409668, 11.465299606323242, -25.4783992767334, 0, 11.465299606323242, -13.56719970703125, 13.56719970703125, 30.573999404907227, -15.227800369262695, 15.227800369262695, 25.572900772094727, -16.67639923095703, 16.67639923095703, 20.661399841308594, -17.701000213623047, 17.701000213623047, 15.928999900817871, -18.089599609375, 18.089599609375, 11.465299606323242, -7.500199794769287, 17.62779998779297, 30.573999404907227, -8.418190002441406, 19.785400390625, 25.572900772094727, -9.218990325927734, 21.667600631713867, 20.661399841308594, -9.785409927368164, 22.99880027770996, 15.928999900817871, -10.000300407409668, 23.503799438476562, 11.465299606323242, 0, 19.108800888061523, 30.573999404907227, 0, 21.447599411010742, 25.572900772094727, 0, 23.487899780273438, 20.661399841308594, 0, 24.930999755859375, 15.928999900817871, 0, 25.4783992767334, 11.465299606323242, 0, 19.108800888061523, 30.573999404907227, 7.500199794769287, 17.62779998779297, 30.573999404907227, 8.418190002441406, 19.785400390625, 25.572900772094727, 0, 21.447599411010742, 25.572900772094727, 9.218990325927734, 21.667600631713867, 20.661399841308594, 0, 23.487899780273438, 20.661399841308594, 9.785409927368164, 22.99880027770996, 15.928999900817871, 0, 24.930999755859375, 15.928999900817871, 10.000300407409668, 23.503799438476562, 11.465299606323242, 0, 25.4783992767334, 11.465299606323242, 13.56719970703125, 13.56719970703125, 30.573999404907227, 15.227800369262695, 15.227800369262695, 25.572900772094727, 16.67639923095703, 16.67639923095703, 20.661399841308594, 17.701000213623047, 17.701000213623047, 15.928999900817871, 18.089599609375, 18.089599609375, 11.465299606323242, 17.62779998779297, 7.500199794769287, 30.573999404907227, 19.785400390625, 8.418190002441406, 25.572900772094727, 21.667600631713867, 9.218990325927734, 20.661399841308594, 22.99880027770996, 9.785409927368164, 15.928999900817871, 23.503799438476562, 10.000300407409668, 11.465299606323242, 19.108800888061523, 0, 30.573999404907227, 21.447599411010742, 0, 25.572900772094727, 23.487899780273438, 0, 20.661399841308594, 24.930999755859375, 0, 15.928999900817871, 25.4783992767334, 0, 11.465299606323242, 25.4783992767334, 0, 11.465299606323242, 23.503799438476562, -10.000300407409668, 11.465299606323242, 22.5856990814209, -9.609620094299316, 7.688300132751465, 24.48310089111328, 0, 7.688300132751465, 20.565799713134766, -8.750229835510254, 4.89661979675293, 22.29360008239746, 0, 4.89661979675293, 18.54599952697754, -7.890830039978027, 3.0006699562072754, 20.104000091552734, 0, 3.0006699562072754, 17.62779998779297, -7.500199794769287, 1.9108799695968628, 19.108800888061523, 0, 1.9108799695968628, 18.089599609375, -18.089599609375, 11.465299606323242, 17.382999420166016, -17.382999420166016, 7.688300132751465, 15.828399658203125, -15.828399658203125, 4.89661979675293, 14.273900032043457, -14.273900032043457, 3.0006699562072754, 13.56719970703125, -13.56719970703125, 1.9108799695968628, 10.000300407409668, -23.503799438476562, 11.465299606323242, 9.609620094299316, -22.5856990814209, 7.688300132751465, 8.750229835510254, -20.565799713134766, 4.89661979675293, 7.890830039978027, -18.54599952697754, 3.0006699562072754, 7.500199794769287, -17.62779998779297, 1.9108799695968628, 0, -25.4783992767334, 11.465299606323242, 0, -24.48310089111328, 7.688300132751465, 0, -22.29360008239746, 4.89661979675293, 0, -20.104000091552734, 3.0006699562072754, 0, -19.108800888061523, 1.9108799695968628, 0, -25.4783992767334, 11.465299606323242, -10.000300407409668, -23.503799438476562, 11.465299606323242, -9.609620094299316, -22.5856990814209, 7.688300132751465, 0, -24.48310089111328, 7.688300132751465, -8.750229835510254, -20.565799713134766, 4.89661979675293, 0, -22.29360008239746, 4.89661979675293, -7.890830039978027, -18.54599952697754, 3.0006699562072754, 0, -20.104000091552734, 3.0006699562072754, -7.500199794769287, -17.62779998779297, 1.9108799695968628, 0, -19.108800888061523, 1.9108799695968628, -18.089599609375, -18.089599609375, 11.465299606323242, -17.382999420166016, -17.382999420166016, 7.688300132751465, -15.828399658203125, -15.828399658203125, 4.89661979675293, -14.273900032043457, -14.273900032043457, 3.0006699562072754, -13.56719970703125, -13.56719970703125, 1.9108799695968628, -23.503799438476562, -10.000300407409668, 11.465299606323242, -22.5856990814209, -9.609620094299316, 7.688300132751465, -20.565799713134766, -8.750229835510254, 4.89661979675293, -18.54599952697754, -7.890830039978027, 3.0006699562072754, -17.62779998779297, -7.500199794769287, 1.9108799695968628, -25.4783992767334, 0, 11.465299606323242, -24.48310089111328, 0, 7.688300132751465, -22.29360008239746, 0, 4.89661979675293, -20.104000091552734, 0, 3.0006699562072754, -19.108800888061523, 0, 1.9108799695968628, -25.4783992767334, 0, 11.465299606323242, -23.503799438476562, 10.000300407409668, 11.465299606323242, -22.5856990814209, 9.609620094299316, 7.688300132751465, -24.48310089111328, 0, 7.688300132751465, -20.565799713134766, 8.750229835510254, 4.89661979675293, -22.29360008239746, 0, 4.89661979675293, -18.54599952697754, 7.890830039978027, 3.0006699562072754, -20.104000091552734, 0, 3.0006699562072754, -17.62779998779297, 7.500199794769287, 1.9108799695968628, -19.108800888061523, 0, 1.9108799695968628, -18.089599609375, 18.089599609375, 11.465299606323242, -17.382999420166016, 17.382999420166016, 7.688300132751465, -15.828399658203125, 15.828399658203125, 4.89661979675293, -14.273900032043457, 14.273900032043457, 3.0006699562072754, -13.56719970703125, 13.56719970703125, 1.9108799695968628, -10.000300407409668, 23.503799438476562, 11.465299606323242, -9.609620094299316, 22.5856990814209, 7.688300132751465, -8.750229835510254, 20.565799713134766, 4.89661979675293, -7.890830039978027, 18.54599952697754, 3.0006699562072754, -7.500199794769287, 17.62779998779297, 1.9108799695968628, 0, 25.4783992767334, 11.465299606323242, 0, 24.48310089111328, 7.688300132751465, 0, 22.29360008239746, 4.89661979675293, 0, 20.104000091552734, 3.0006699562072754, 0, 19.108800888061523, 1.9108799695968628, 0, 25.4783992767334, 11.465299606323242, 10.000300407409668, 23.503799438476562, 11.465299606323242, 9.609620094299316, 22.5856990814209, 7.688300132751465, 0, 24.48310089111328, 7.688300132751465, 8.750229835510254, 20.565799713134766, 4.89661979675293, 0, 22.29360008239746, 4.89661979675293, 7.890830039978027, 18.54599952697754, 3.0006699562072754, 0, 20.104000091552734, 3.0006699562072754, 7.500199794769287, 17.62779998779297, 1.9108799695968628, 0, 19.108800888061523, 1.9108799695968628, 18.089599609375, 18.089599609375, 11.465299606323242, 17.382999420166016, 17.382999420166016, 7.688300132751465, 15.828399658203125, 15.828399658203125, 4.89661979675293, 14.273900032043457, 14.273900032043457, 3.0006699562072754, 13.56719970703125, 13.56719970703125, 1.9108799695968628, 23.503799438476562, 10.000300407409668, 11.465299606323242, 22.5856990814209, 9.609620094299316, 7.688300132751465, 20.565799713134766, 8.750229835510254, 4.89661979675293, 18.54599952697754, 7.890830039978027, 3.0006699562072754, 17.62779998779297, 7.500199794769287, 1.9108799695968628, 25.4783992767334, 0, 11.465299606323242, 24.48310089111328, 0, 7.688300132751465, 22.29360008239746, 0, 4.89661979675293, 20.104000091552734, 0, 3.0006699562072754, 19.108800888061523, 0, 1.9108799695968628, 19.108800888061523, 0, 1.9108799695968628, 17.62779998779297, -7.500199794769287, 1.9108799695968628, 17.228500366210938, -7.330269813537598, 1.2092299461364746, 18.675800323486328, 0, 1.2092299461364746, 15.093799591064453, -6.422039985656738, 0.5971490144729614, 16.361900329589844, 0, 0.5971490144729614, 9.819259643554688, -4.177840232849121, 0.16421599686145782, 10.644200325012207, 0, 0.16421599686145782, 0, 0, 0, 0, 0, 0, 13.56719970703125, -13.56719970703125, 1.9108799695968628, 13.25979995727539, -13.25979995727539, 1.2092299461364746, 11.616900444030762, -11.616900444030762, 0.5971490144729614, 7.557370185852051, -7.557370185852051, 0.16421599686145782, 0, 0, 0, 7.500199794769287, -17.62779998779297, 1.9108799695968628, 7.330269813537598, -17.228500366210938, 1.2092299461364746, 6.422039985656738, -15.093799591064453, 0.5971490144729614, 4.177840232849121, -9.819259643554688, 0.16421599686145782, 0, 0, 0, 0, -19.108800888061523, 1.9108799695968628, 0, -18.675800323486328, 1.2092299461364746, 0, -16.361900329589844, 0.5971490144729614, 0, -10.644200325012207, 0.16421599686145782, 0, 0, 0, 0, -19.108800888061523, 1.9108799695968628, -7.500199794769287, -17.62779998779297, 1.9108799695968628, -7.330269813537598, -17.228500366210938, 1.2092299461364746, 0, -18.675800323486328, 1.2092299461364746, -6.422039985656738, -15.093799591064453, 0.5971490144729614, 0, -16.361900329589844, 0.5971490144729614, -4.177840232849121, -9.819259643554688, 0.16421599686145782, 0, -10.644200325012207, 0.16421599686145782, 0, 0, 0, 0, 0, 0, -13.56719970703125, -13.56719970703125, 1.9108799695968628, -13.25979995727539, -13.25979995727539, 1.2092299461364746, -11.616900444030762, -11.616900444030762, 0.5971490144729614, -7.557370185852051, -7.557370185852051, 0.16421599686145782, 0, 0, 0, -17.62779998779297, -7.500199794769287, 1.9108799695968628, -17.228500366210938, -7.330269813537598, 1.2092299461364746, -15.093799591064453, -6.422039985656738, 0.5971490144729614, -9.819259643554688, -4.177840232849121, 0.16421599686145782, 0, 0, 0, -19.108800888061523, 0, 1.9108799695968628, -18.675800323486328, 0, 1.2092299461364746, -16.361900329589844, 0, 0.5971490144729614, -10.644200325012207, 0, 0.16421599686145782, 0, 0, 0, -19.108800888061523, 0, 1.9108799695968628, -17.62779998779297, 7.500199794769287, 1.9108799695968628, -17.228500366210938, 7.330269813537598, 1.2092299461364746, -18.675800323486328, 0, 1.2092299461364746, -15.093799591064453, 6.422039985656738, 0.5971490144729614, -16.361900329589844, 0, 0.5971490144729614, -9.819259643554688, 4.177840232849121, 0.16421599686145782, -10.644200325012207, 0, 0.16421599686145782, 0, 0, 0, 0, 0, 0, -13.56719970703125, 13.56719970703125, 1.9108799695968628, -13.25979995727539, 13.25979995727539, 1.2092299461364746, -11.616900444030762, 11.616900444030762, 0.5971490144729614, -7.557370185852051, 7.557370185852051, 0.16421599686145782, 0, 0, 0, -7.500199794769287, 17.62779998779297, 1.9108799695968628, -7.330269813537598, 17.228500366210938, 1.2092299461364746, -6.422039985656738, 15.093799591064453, 0.5971490144729614, -4.177840232849121, 9.819259643554688, 0.16421599686145782, 0, 0, 0, 0, 19.108800888061523, 1.9108799695968628, 0, 18.675800323486328, 1.2092299461364746, 0, 16.361900329589844, 0.5971490144729614, 0, 10.644200325012207, 0.16421599686145782, 0, 0, 0, 0, 19.108800888061523, 1.9108799695968628, 7.500199794769287, 17.62779998779297, 1.9108799695968628, 7.330269813537598, 17.228500366210938, 1.2092299461364746, 0, 18.675800323486328, 1.2092299461364746, 6.422039985656738, 15.093799591064453, 0.5971490144729614, 0, 16.361900329589844, 0.5971490144729614, 4.177840232849121, 9.819259643554688, 0.16421599686145782, 0, 10.644200325012207, 0.16421599686145782, 0, 0, 0, 0, 0, 0, 13.56719970703125, 13.56719970703125, 1.9108799695968628, 13.25979995727539, 13.25979995727539, 1.2092299461364746, 11.616900444030762, 11.616900444030762, 0.5971490144729614, 7.557370185852051, 7.557370185852051, 0.16421599686145782, 0, 0, 0, 17.62779998779297, 7.500199794769287, 1.9108799695968628, 17.228500366210938, 7.330269813537598, 1.2092299461364746, 15.093799591064453, 6.422039985656738, 0.5971490144729614, 9.819259643554688, 4.177840232849121, 0.16421599686145782, 0, 0, 0, 19.108800888061523, 0, 1.9108799695968628, 18.675800323486328, 0, 1.2092299461364746, 16.361900329589844, 0, 0.5971490144729614, 10.644200325012207, 0, 0.16421599686145782, 0, 0, 0, -20.382699966430664, 0, 25.796899795532227, -20.1835994720459, -2.149739980697632, 26.244699478149414, -26.511600494384766, -2.149739980697632, 26.192899703979492, -26.334299087524414, 0, 25.752099990844727, -31.156299591064453, -2.149739980697632, 25.830400466918945, -30.733299255371094, 0, 25.438600540161133, -34.016998291015625, -2.149739980697632, 24.846500396728516, -33.46030044555664, 0, 24.587600708007812, -34.99290084838867, -2.149739980697632, 22.930500030517578, -34.39580154418945, 0, 22.930500030517578, -19.74570083618164, -2.8663198947906494, 27.229999542236328, -26.901599884033203, -2.8663198947906494, 27.162799835205078, -32.08679962158203, -2.8663198947906494, 26.69260025024414, -35.241798400878906, -2.8663198947906494, 25.416200637817383, -36.30670166015625, -2.8663198947906494, 22.930500030517578, -19.30780029296875, -2.149739980697632, 28.215299606323242, -27.29159927368164, -2.149739980697632, 28.132699966430664, -33.017398834228516, -2.149739980697632, 27.55470085144043, -36.46649932861328, -2.149739980697632, 25.98579978942871, -37.620399475097656, -2.149739980697632, 22.930500030517578, -19.108800888061523, 0, 28.66320037841797, -27.468900680541992, 0, 28.57360076904297, -33.440399169921875, 0, 27.94659996032715, -37.02330017089844, 0, 26.244699478149414, -38.21760177612305, 0, 22.930500030517578, -19.108800888061523, 0, 28.66320037841797, -19.30780029296875, 2.149739980697632, 28.215299606323242, -27.29159927368164, 2.149739980697632, 28.132699966430664, -27.468900680541992, 0, 28.57360076904297, -33.017398834228516, 2.149739980697632, 27.55470085144043, -33.440399169921875, 0, 27.94659996032715, -36.46649932861328, 2.149739980697632, 25.98579978942871, -37.02330017089844, 0, 26.244699478149414, -37.620399475097656, 2.149739980697632, 22.930500030517578, -38.21760177612305, 0, 22.930500030517578, -19.74570083618164, 2.8663198947906494, 27.229999542236328, -26.901599884033203, 2.8663198947906494, 27.162799835205078, -32.08679962158203, 2.8663198947906494, 26.69260025024414, -35.241798400878906, 2.8663198947906494, 25.416200637817383, -36.30670166015625, 2.8663198947906494, 22.930500030517578, -20.1835994720459, 2.149739980697632, 26.244699478149414, -26.511600494384766, 2.149739980697632, 26.192899703979492, -31.156299591064453, 2.149739980697632, 25.830400466918945, -34.016998291015625, 2.149739980697632, 24.846500396728516, -34.99290084838867, 2.149739980697632, 22.930500030517578, -20.382699966430664, 0, 25.796899795532227, -26.334299087524414, 0, 25.752099990844727, -30.733299255371094, 0, 25.438600540161133, -33.46030044555664, 0, 24.587600708007812, -34.39580154418945, 0, 22.930500030517578, -34.39580154418945, 0, 22.930500030517578, -34.99290084838867, -2.149739980697632, 22.930500030517578, -34.44089889526367, -2.149739980697632, 20.082199096679688, -33.89820098876953, 0, 20.33289909362793, -32.711299896240234, -2.149739980697632, 16.81529998779297, -32.32569885253906, 0, 17.197900772094727, -29.69420051574707, -2.149739980697632, 13.590499877929688, -29.558900833129883, 0, 14.062899589538574, -25.279300689697266, -2.149739980697632, 10.8681001663208, -25.4783992767334, 0, 11.465299606323242, -36.30670166015625, -2.8663198947906494, 22.930500030517578, -35.6348991394043, -2.8663198947906494, 19.530500411987305, -33.55979919433594, -2.8663198947906494, 15.973699569702148, -29.99180030822754, -2.8663198947906494, 12.551300048828125, -24.841400146484375, -2.8663198947906494, 9.554389953613281, -37.620399475097656, -2.149739980697632, 22.930500030517578, -36.82889938354492, -2.149739980697632, 18.97879981994629, -34.408199310302734, -2.149739980697632, 15.132100105285645, -30.289499282836914, -2.149739980697632, 11.512200355529785, -24.403499603271484, -2.149739980697632, 8.240659713745117, -38.21760177612305, 0, 22.930500030517578, -37.37160110473633, 0, 18.728099822998047, -34.79389953613281, 0, 14.749600410461426, -30.424800872802734, 0, 11.039799690246582, -24.204500198364258, 0, 7.643509864807129, -38.21760177612305, 0, 22.930500030517578, -37.620399475097656, 2.149739980697632, 22.930500030517578, -36.82889938354492, 2.149739980697632, 18.97879981994629, -37.37160110473633, 0, 18.728099822998047, -34.408199310302734, 2.149739980697632, 15.132100105285645, -34.79389953613281, 0, 14.749600410461426, -30.289499282836914, 2.149739980697632, 11.512200355529785, -30.424800872802734, 0, 11.039799690246582, -24.403499603271484, 2.149739980697632, 8.240659713745117, -24.204500198364258, 0, 7.643509864807129, -36.30670166015625, 2.8663198947906494, 22.930500030517578, -35.6348991394043, 2.8663198947906494, 19.530500411987305, -33.55979919433594, 2.8663198947906494, 15.973699569702148, -29.99180030822754, 2.8663198947906494, 12.551300048828125, -24.841400146484375, 2.8663198947906494, 9.554389953613281, -34.99290084838867, 2.149739980697632, 22.930500030517578, -34.44089889526367, 2.149739980697632, 20.082199096679688, -32.711299896240234, 2.149739980697632, 16.81529998779297, -29.69420051574707, 2.149739980697632, 13.590499877929688, -25.279300689697266, 2.149739980697632, 10.8681001663208, -34.39580154418945, 0, 22.930500030517578, -33.89820098876953, 0, 20.33289909362793, -32.32569885253906, 0, 17.197900772094727, -29.558900833129883, 0, 14.062899589538574, -25.4783992767334, 0, 11.465299606323242, 21.656600952148438, 0, 18.15329933166504, 21.656600952148438, -4.729420185089111, 16.511199951171875, 28.233999252319336, -4.270359992980957, 18.339000701904297, 27.76740074157715, 0, 19.55660057067871, 31.011899948120117, -3.2604401111602783, 22.221399307250977, 30.4148006439209, 0, 22.930500030517578, 32.59560012817383, -2.2505099773406982, 26.764400482177734, 31.867900848388672, 0, 27.020999908447266, 35.5900993347168, -1.791450023651123, 30.573999404907227, 34.39580154418945, 0, 30.573999404907227, 21.656600952148438, -6.3059000968933105, 12.89840030670166, 29.260299682617188, -5.693819999694824, 15.660200119018555, 32.32569885253906, -4.347249984741211, 20.661399841308594, 34.19670104980469, -3.0006699562072754, 26.199899673461914, 38.21760177612305, -2.3886001110076904, 30.573999404907227, 21.656600952148438, -4.729420185089111, 9.285670280456543, 30.286699295043945, -4.270359992980957, 12.981499671936035, 33.639400482177734, -3.2604401111602783, 19.101299285888672, 35.79790115356445, -2.2505099773406982, 25.635400772094727, 40.845001220703125, -1.791450023651123, 30.573999404907227, 21.656600952148438, 0, 7.643509864807129, 30.75320053100586, 0, 11.763799667358398, 34.23659896850586, 0, 18.392200469970703, 36.52560043334961, 0, 25.378799438476562, 42.03929901123047, 0, 30.573999404907227, 21.656600952148438, 0, 7.643509864807129, 21.656600952148438, 4.729420185089111, 9.285670280456543, 30.286699295043945, 4.270359992980957, 12.981499671936035, 30.75320053100586, 0, 11.763799667358398, 33.639400482177734, 3.2604401111602783, 19.101299285888672, 34.23659896850586, 0, 18.392200469970703, 35.79790115356445, 2.2505099773406982, 25.635400772094727, 36.52560043334961, 0, 25.378799438476562, 40.845001220703125, 1.791450023651123, 30.573999404907227, 42.03929901123047, 0, 30.573999404907227, 21.656600952148438, 6.3059000968933105, 12.89840030670166, 29.260299682617188, 5.693819999694824, 15.660200119018555, 32.32569885253906, 4.347249984741211, 20.661399841308594, 34.19670104980469, 3.0006699562072754, 26.199899673461914, 38.21760177612305, 2.3886001110076904, 30.573999404907227, 21.656600952148438, 4.729420185089111, 16.511199951171875, 28.233999252319336, 4.270359992980957, 18.339000701904297, 31.011899948120117, 3.2604401111602783, 22.221399307250977, 32.59560012817383, 2.2505099773406982, 26.764400482177734, 35.5900993347168, 1.791450023651123, 30.573999404907227, 21.656600952148438, 0, 18.15329933166504, 27.76740074157715, 0, 19.55660057067871, 30.4148006439209, 0, 22.930500030517578, 31.867900848388672, 0, 27.020999908447266, 34.39580154418945, 0, 30.573999404907227, 34.39580154418945, 0, 30.573999404907227, 35.5900993347168, -1.791450023651123, 30.573999404907227, 36.59049987792969, -1.679479956626892, 31.137699127197266, 35.3114013671875, 0, 31.111499786376953, 37.18870162963867, -1.4331599473953247, 31.332599639892578, 35.98820114135742, 0, 31.290599822998047, 37.206600189208984, -1.1868300437927246, 31.1481990814209, 36.187198638916016, 0, 31.111499786376953, 36.46590042114258, -1.074869990348816, 30.573999404907227, 35.669700622558594, 0, 30.573999404907227, 38.21760177612305, -2.3886001110076904, 30.573999404907227, 39.40439987182617, -2.2393100261688232, 31.195499420166016, 39.829898834228516, -1.9108799695968628, 31.424999237060547, 39.44919967651367, -1.582450032234192, 31.229000091552734, 38.21760177612305, -1.4331599473953247, 30.573999404907227, 40.845001220703125, -1.791450023651123, 30.573999404907227, 42.218299865722656, -1.679479956626892, 31.25320053100586, 42.47100067138672, -1.4331599473953247, 31.51740074157715, 41.69169998168945, -1.1868300437927246, 31.309900283813477, 39.969200134277344, -1.074869990348816, 30.573999404907227, 42.03929901123047, 0, 30.573999404907227, 43.49729919433594, 0, 31.279399871826172, 43.67150115966797, 0, 31.55929946899414, 42.71110153198242, 0, 31.346599578857422, 40.76539993286133, 0, 30.573999404907227, 42.03929901123047, 0, 30.573999404907227, 40.845001220703125, 1.791450023651123, 30.573999404907227, 42.218299865722656, 1.679479956626892, 31.25320053100586, 43.49729919433594, 0, 31.279399871826172, 42.47100067138672, 1.4331599473953247, 31.51740074157715, 43.67150115966797, 0, 31.55929946899414, 41.69169998168945, 1.1868300437927246, 31.309900283813477, 42.71110153198242, 0, 31.346599578857422, 39.969200134277344, 1.074869990348816, 30.573999404907227, 40.76539993286133, 0, 30.573999404907227, 38.21760177612305, 2.3886001110076904, 30.573999404907227, 39.40439987182617, 2.2393100261688232, 31.195499420166016, 39.829898834228516, 1.9108799695968628, 31.424999237060547, 39.44919967651367, 1.582450032234192, 31.229000091552734, 38.21760177612305, 1.4331599473953247, 30.573999404907227, 35.5900993347168, 1.791450023651123, 30.573999404907227, 36.59049987792969, 1.679479956626892, 31.137699127197266, 37.18870162963867, 1.4331599473953247, 31.332599639892578, 37.206600189208984, 1.1868300437927246, 31.1481990814209, 36.46590042114258, 1.074869990348816, 30.573999404907227, 34.39580154418945, 0, 30.573999404907227, 35.3114013671875, 0, 31.111499786376953, 35.98820114135742, 0, 31.290599822998047, 36.187198638916016, 0, 31.111499786376953, 35.669700622558594, 0, 30.573999404907227, 0, 0, 40.12839889526367, 0, 0, 40.12839889526367, 4.004499912261963, -1.7077000141143799, 39.501399993896484, 4.339280128479004, 0, 39.501399993896484, 3.8207099437713623, -1.6290700435638428, 37.97869873046875, 4.140230178833008, 0, 37.97869873046875, 2.314160108566284, -0.985912024974823, 36.09769821166992, 2.5080299377441406, 0, 36.09769821166992, 2.3503799438476562, -1.0000300407409668, 34.39580154418945, 2.547840118408203, 0, 34.39580154418945, 0, 0, 40.12839889526367, 3.0849199295043945, -3.0849199295043945, 39.501399993896484, 2.943150043487549, -2.943150043487549, 37.97869873046875, 1.782039999961853, -1.782039999961853, 36.09769821166992, 1.8089599609375, -1.8089599609375, 34.39580154418945, 0, 0, 40.12839889526367, 1.7077000141143799, -4.004499912261963, 39.501399993896484, 1.6290700435638428, -3.8207099437713623, 37.97869873046875, 0.985912024974823, -2.314160108566284, 36.09769821166992, 1.0000300407409668, -2.3503799438476562, 34.39580154418945, 0, 0, 40.12839889526367, 0, -4.339280128479004, 39.501399993896484, 0, -4.140230178833008, 37.97869873046875, 0, -2.5080299377441406, 36.09769821166992, 0, -2.547840118408203, 34.39580154418945, 0, 0, 40.12839889526367, 0, 0, 40.12839889526367, -1.7077000141143799, -4.004499912261963, 39.501399993896484, 0, -4.339280128479004, 39.501399993896484, -1.6290700435638428, -3.8207099437713623, 37.97869873046875, 0, -4.140230178833008, 37.97869873046875, -0.985912024974823, -2.314160108566284, 36.09769821166992, 0, -2.5080299377441406, 36.09769821166992, -1.0000300407409668, -2.3503799438476562, 34.39580154418945, 0, -2.547840118408203, 34.39580154418945, 0, 0, 40.12839889526367, -3.0849199295043945, -3.0849199295043945, 39.501399993896484, -2.943150043487549, -2.943150043487549, 37.97869873046875, -1.782039999961853, -1.782039999961853, 36.09769821166992, -1.8089599609375, -1.8089599609375, 34.39580154418945, 0, 0, 40.12839889526367, -4.004499912261963, -1.7077000141143799, 39.501399993896484, -3.8207099437713623, -1.6290700435638428, 37.97869873046875, -2.314160108566284, -0.985912024974823, 36.09769821166992, -2.3503799438476562, -1.0000300407409668, 34.39580154418945, 0, 0, 40.12839889526367, -4.339280128479004, 0, 39.501399993896484, -4.140230178833008, 0, 37.97869873046875, -2.5080299377441406, 0, 36.09769821166992, -2.547840118408203, 0, 34.39580154418945, 0, 0, 40.12839889526367, 0, 0, 40.12839889526367, -4.004499912261963, 1.7077000141143799, 39.501399993896484, -4.339280128479004, 0, 39.501399993896484, -3.8207099437713623, 1.6290700435638428, 37.97869873046875, -4.140230178833008, 0, 37.97869873046875, -2.314160108566284, 0.985912024974823, 36.09769821166992, -2.5080299377441406, 0, 36.09769821166992, -2.3503799438476562, 1.0000300407409668, 34.39580154418945, -2.547840118408203, 0, 34.39580154418945, 0, 0, 40.12839889526367, -3.0849199295043945, 3.0849199295043945, 39.501399993896484, -2.943150043487549, 2.943150043487549, 37.97869873046875, -1.782039999961853, 1.782039999961853, 36.09769821166992, -1.8089599609375, 1.8089599609375, 34.39580154418945, 0, 0, 40.12839889526367, -1.7077000141143799, 4.004499912261963, 39.501399993896484, -1.6290700435638428, 3.8207099437713623, 37.97869873046875, -0.985912024974823, 2.314160108566284, 36.09769821166992, -1.0000300407409668, 2.3503799438476562, 34.39580154418945, 0, 0, 40.12839889526367, 0, 4.339280128479004, 39.501399993896484, 0, 4.140230178833008, 37.97869873046875, 0, 2.5080299377441406, 36.09769821166992, 0, 2.547840118408203, 34.39580154418945, 0, 0, 40.12839889526367, 0, 0, 40.12839889526367, 1.7077000141143799, 4.004499912261963, 39.501399993896484, 0, 4.339280128479004, 39.501399993896484, 1.6290700435638428, 3.8207099437713623, 37.97869873046875, 0, 4.140230178833008, 37.97869873046875, 0.985912024974823, 2.314160108566284, 36.09769821166992, 0, 2.5080299377441406, 36.09769821166992, 1.0000300407409668, 2.3503799438476562, 34.39580154418945, 0, 2.547840118408203, 34.39580154418945, 0, 0, 40.12839889526367, 3.0849199295043945, 3.0849199295043945, 39.501399993896484, 2.943150043487549, 2.943150043487549, 37.97869873046875, 1.782039999961853, 1.782039999961853, 36.09769821166992, 1.8089599609375, 1.8089599609375, 34.39580154418945, 0, 0, 40.12839889526367, 4.004499912261963, 1.7077000141143799, 39.501399993896484, 3.8207099437713623, 1.6290700435638428, 37.97869873046875, 2.314160108566284, 0.985912024974823, 36.09769821166992, 2.3503799438476562, 1.0000300407409668, 34.39580154418945, 0, 0, 40.12839889526367, 4.339280128479004, 0, 39.501399993896484, 4.140230178833008, 0, 37.97869873046875, 2.5080299377441406, 0, 36.09769821166992, 2.547840118408203, 0, 34.39580154418945, 2.547840118408203, 0, 34.39580154418945, 2.3503799438476562, -1.0000300407409668, 34.39580154418945, 5.361800193786621, -2.2813100814819336, 33.261199951171875, 5.812250137329102, 0, 33.261199951171875, 9.695320129394531, -4.125110149383545, 32.484901428222656, 10.50979995727539, 0, 32.484901428222656, 13.58810043334961, -5.781400203704834, 31.708599090576172, 14.729700088500977, 0, 31.708599090576172, 15.27750015258789, -6.5001702308654785, 30.573999404907227, 16.56089973449707, 0, 30.573999404907227, 1.8089599609375, -1.8089599609375, 34.39580154418945, 4.126699924468994, -4.126699924468994, 33.261199951171875, 7.461979866027832, -7.461979866027832, 32.484901428222656, 10.458100318908691, -10.458100318908691, 31.708599090576172, 11.758299827575684, -11.758299827575684, 30.573999404907227, 1.0000300407409668, -2.3503799438476562, 34.39580154418945, 2.2813100814819336, -5.361800193786621, 33.261199951171875, 4.125110149383545, -9.695320129394531, 32.484901428222656, 5.781400203704834, -13.58810043334961, 31.708599090576172, 6.5001702308654785, -15.27750015258789, 30.573999404907227, 0, -2.547840118408203, 34.39580154418945, 0, -5.812250137329102, 33.261199951171875, 0, -10.50979995727539, 32.484901428222656, 0, -14.729700088500977, 31.708599090576172, 0, -16.56089973449707, 30.573999404907227, 0, -2.547840118408203, 34.39580154418945, -1.0000300407409668, -2.3503799438476562, 34.39580154418945, -2.2813100814819336, -5.361800193786621, 33.261199951171875, 0, -5.812250137329102, 33.261199951171875, -4.125110149383545, -9.695320129394531, 32.484901428222656, 0, -10.50979995727539, 32.484901428222656, -5.781400203704834, -13.58810043334961, 31.708599090576172, 0, -14.729700088500977, 31.708599090576172, -6.5001702308654785, -15.27750015258789, 30.573999404907227, 0, -16.56089973449707, 30.573999404907227, -1.8089599609375, -1.8089599609375, 34.39580154418945, -4.126699924468994, -4.126699924468994, 33.261199951171875, -7.461979866027832, -7.461979866027832, 32.484901428222656, -10.458100318908691, -10.458100318908691, 31.708599090576172, -11.758299827575684, -11.758299827575684, 30.573999404907227, -2.3503799438476562, -1.0000300407409668, 34.39580154418945, -5.361800193786621, -2.2813100814819336, 33.261199951171875, -9.695320129394531, -4.125110149383545, 32.484901428222656, -13.58810043334961, -5.781400203704834, 31.708599090576172, -15.27750015258789, -6.5001702308654785, 30.573999404907227, -2.547840118408203, 0, 34.39580154418945, -5.812250137329102, 0, 33.261199951171875, -10.50979995727539, 0, 32.484901428222656, -14.729700088500977, 0, 31.708599090576172, -16.56089973449707, 0, 30.573999404907227, -2.547840118408203, 0, 34.39580154418945, -2.3503799438476562, 1.0000300407409668, 34.39580154418945, -5.361800193786621, 2.2813100814819336, 33.261199951171875, -5.812250137329102, 0, 33.261199951171875, -9.695320129394531, 4.125110149383545, 32.484901428222656, -10.50979995727539, 0, 32.484901428222656, -13.58810043334961, 5.781400203704834, 31.708599090576172, -14.729700088500977, 0, 31.708599090576172, -15.27750015258789, 6.5001702308654785, 30.573999404907227, -16.56089973449707, 0, 30.573999404907227, -1.8089599609375, 1.8089599609375, 34.39580154418945, -4.126699924468994, 4.126699924468994, 33.261199951171875, -7.461979866027832, 7.461979866027832, 32.484901428222656, -10.458100318908691, 10.458100318908691, 31.708599090576172, -11.758299827575684, 11.758299827575684, 30.573999404907227, -1.0000300407409668, 2.3503799438476562, 34.39580154418945, -2.2813100814819336, 5.361800193786621, 33.261199951171875, -4.125110149383545, 9.695320129394531, 32.484901428222656, -5.781400203704834, 13.58810043334961, 31.708599090576172, -6.5001702308654785, 15.27750015258789, 30.573999404907227, 0, 2.547840118408203, 34.39580154418945, 0, 5.812250137329102, 33.261199951171875, 0, 10.50979995727539, 32.484901428222656, 0, 14.729700088500977, 31.708599090576172, 0, 16.56089973449707, 30.573999404907227, 0, 2.547840118408203, 34.39580154418945, 1.0000300407409668, 2.3503799438476562, 34.39580154418945, 2.2813100814819336, 5.361800193786621, 33.261199951171875, 0, 5.812250137329102, 33.261199951171875, 4.125110149383545, 9.695320129394531, 32.484901428222656, 0, 10.50979995727539, 32.484901428222656, 5.781400203704834, 13.58810043334961, 31.708599090576172, 0, 14.729700088500977, 31.708599090576172, 6.5001702308654785, 15.27750015258789, 30.573999404907227, 0, 16.56089973449707, 30.573999404907227, 1.8089599609375, 1.8089599609375, 34.39580154418945, 4.126699924468994, 4.126699924468994, 33.261199951171875, 7.461979866027832, 7.461979866027832, 32.484901428222656, 10.458100318908691, 10.458100318908691, 31.708599090576172, 11.758299827575684, 11.758299827575684, 30.573999404907227, 2.3503799438476562, 1.0000300407409668, 34.39580154418945, 5.361800193786621, 2.2813100814819336, 33.261199951171875, 9.695320129394531, 4.125110149383545, 32.484901428222656, 13.58810043334961, 5.781400203704834, 31.708599090576172, 15.27750015258789, 6.5001702308654785, 30.573999404907227, 2.547840118408203, 0, 34.39580154418945, 5.812250137329102, 0, 33.261199951171875, 10.50979995727539, 0, 32.484901428222656, 14.729700088500977, 0, 31.708599090576172, 16.56089973449707, 0, 30.573999404907227
  };
  // scale and translate vertices to unit size and origin center
  GLfloat factor = size / 50.f;
  int nVertices = sizeof(vertices) / sizeof(GLfloat);
  for (int i = 0; i < nVertices; ++i) {
    vertices[i] *= factor;
  }
  for (int i = 2; i < nVertices; i += 3) {
    vertices[i] -= 0.4f;
  }

  // define texture coordinates (3D)
  GLfloat texCoords[] = {
      2, 2, 0, 1.75, 2, 0, 1.75, 1.975000023841858, 0, 2, 1.975000023841858, 0, 1.75, 1.9500000476837158, 0, 2, 1.9500000476837158, 0, 1.75, 1.9249999523162842, 0, 2, 1.9249999523162842, 0, 1.75, 1.899999976158142, 0, 2, 1.899999976158142, 0, 1.5, 2, 0, 1.5, 1.975000023841858, 0, 1.5, 1.9500000476837158, 0, 1.5, 1.9249999523162842, 0, 1.5, 1.899999976158142, 0, 1.25, 2, 0, 1.25, 1.975000023841858, 0, 1.25, 1.9500000476837158, 0, 1.25, 1.9249999523162842, 0, 1.25, 1.899999976158142, 0, 1, 2, 0, 1, 1.975000023841858, 0, 1, 1.9500000476837158, 0, 1, 1.9249999523162842, 0, 1, 1.899999976158142, 0, 1, 2, 0, 0.75, 2, 0, 0.75, 1.975000023841858, 0, 1, 1.975000023841858, 0, 0.75, 1.9500000476837158, 0, 1, 1.9500000476837158, 0, 0.75, 1.9249999523162842, 0, 1, 1.9249999523162842, 0, 0.75, 1.899999976158142, 0, 1, 1.899999976158142, 0, 0.5, 2, 0, 0.5, 1.975000023841858, 0, 0.5, 1.9500000476837158, 0, 0.5, 1.9249999523162842, 0, 0.5, 1.899999976158142, 0, 0.25, 2, 0, 0.25, 1.975000023841858, 0, 0.25, 1.9500000476837158, 0, 0.25, 1.9249999523162842, 0, 0.25, 1.899999976158142, 0, 0, 2, 0, 0, 1.975000023841858, 0, 0, 1.9500000476837158, 0, 0, 1.9249999523162842, 0, 0, 1.899999976158142, 0, 2, 2, 0, 1.75, 2, 0, 1.75, 1.975000023841858, 0, 2, 1.975000023841858, 0, 1.75, 1.9500000476837158, 0, 2, 1.9500000476837158, 0, 1.75, 1.9249999523162842, 0, 2, 1.9249999523162842, 0, 1.75, 1.899999976158142, 0, 2, 1.899999976158142, 0, 1.5, 2, 0, 1.5, 1.975000023841858, 0, 1.5, 1.9500000476837158, 0, 1.5, 1.9249999523162842, 0, 1.5, 1.899999976158142, 0, 1.25, 2, 0, 1.25, 1.975000023841858, 0, 1.25, 1.9500000476837158, 0, 1.25, 1.9249999523162842, 0, 1.25, 1.899999976158142, 0, 1, 2, 0, 1, 1.975000023841858, 0, 1, 1.9500000476837158, 0, 1, 1.9249999523162842, 0, 1, 1.899999976158142, 0, 1, 2, 0, 0.75, 2, 0, 0.75, 1.975000023841858, 0, 1, 1.975000023841858, 0, 0.75, 1.9500000476837158, 0, 1, 1.9500000476837158, 0, 0.75, 1.9249999523162842, 0, 1, 1.9249999523162842, 0, 0.75, 1.899999976158142, 0, 1, 1.899999976158142, 0, 0.5, 2, 0, 0.5, 1.975000023841858, 0, 0.5, 1.9500000476837158, 0, 0.5, 1.9249999523162842, 0, 0.5, 1.899999976158142, 0, 0.25, 2, 0, 0.25, 1.975000023841858, 0, 0.25, 1.9500000476837158, 0, 0.25, 1.9249999523162842, 0, 0.25, 1.899999976158142, 0, 0, 2, 0, 0, 1.975000023841858, 0, 0, 1.9500000476837158, 0, 0, 1.9249999523162842, 0, 0, 1.899999976158142, 0, 2, 1.899999976158142, 0, 1.75, 1.899999976158142, 0, 1.75, 1.6749999523162842, 0, 2, 1.6749999523162842, 0, 1.75, 1.4500000476837158, 0, 2, 1.4500000476837158, 0, 1.75, 1.225000023841858, 0, 2, 1.225000023841858, 0, 1.75, 1, 0, 2, 1, 0, 1.5, 1.899999976158142, 0, 1.5, 1.6749999523162842, 0, 1.5, 1.4500000476837158, 0, 1.5, 1.225000023841858, 0, 1.5, 1, 0, 1.25, 1.899999976158142, 0, 1.25, 1.6749999523162842, 0, 1.25, 1.4500000476837158, 0, 1.25, 1.225000023841858, 0, 1.25, 1, 0, 1, 1.899999976158142, 0, 1, 1.6749999523162842, 0, 1, 1.4500000476837158, 0, 1, 1.225000023841858, 0, 1, 1, 0, 1, 1.899999976158142, 0, 0.75, 1.899999976158142, 0, 0.75, 1.6749999523162842, 0, 1, 1.6749999523162842, 0, 0.75, 1.4500000476837158, 0, 1, 1.4500000476837158, 0, 0.75, 1.225000023841858, 0, 1, 1.225000023841858, 0, 0.75, 1, 0, 1, 1, 0, 0.5, 1.899999976158142, 0, 0.5, 1.6749999523162842, 0, 0.5, 1.4500000476837158, 0, 0.5, 1.225000023841858, 0, 0.5, 1, 0, 0.25, 1.899999976158142, 0, 0.25, 1.6749999523162842, 0, 0.25, 1.4500000476837158, 0, 0.25, 1.225000023841858, 0, 0.25, 1, 0, 0, 1.899999976158142, 0, 0, 1.6749999523162842, 0, 0, 1.4500000476837158, 0, 0, 1.225000023841858, 0, 0, 1, 0, 2, 1.899999976158142, 0, 1.75, 1.899999976158142, 0, 1.75, 1.6749999523162842, 0, 2, 1.6749999523162842, 0, 1.75, 1.4500000476837158, 0, 2, 1.4500000476837158, 0, 1.75, 1.225000023841858, 0, 2, 1.225000023841858, 0, 1.75, 1, 0, 2, 1, 0, 1.5, 1.899999976158142, 0, 1.5, 1.6749999523162842, 0, 1.5, 1.4500000476837158, 0, 1.5, 1.225000023841858, 0, 1.5, 1, 0, 1.25, 1.899999976158142, 0, 1.25, 1.6749999523162842, 0, 1.25, 1.4500000476837158, 0, 1.25, 1.225000023841858, 0, 1.25, 1, 0, 1, 1.899999976158142, 0, 1, 1.6749999523162842, 0, 1, 1.4500000476837158, 0, 1, 1.225000023841858, 0, 1, 1, 0, 1, 1.899999976158142, 0, 0.75, 1.899999976158142, 0, 0.75, 1.6749999523162842, 0, 1, 1.6749999523162842, 0, 0.75, 1.4500000476837158, 0, 1, 1.4500000476837158, 0, 0.75, 1.225000023841858, 0, 1, 1.225000023841858, 0, 0.75, 1, 0, 1, 1, 0, 0.5, 1.899999976158142, 0, 0.5, 1.6749999523162842, 0, 0.5, 1.4500000476837158, 0, 0.5, 1.225000023841858, 0, 0.5, 1, 0, 0.25, 1.899999976158142, 0, 0.25, 1.6749999523162842, 0, 0.25, 1.4500000476837158, 0, 0.25, 1.225000023841858, 0, 0.25, 1, 0, 0, 1.899999976158142, 0, 0, 1.6749999523162842, 0, 0, 1.4500000476837158, 0, 0, 1.225000023841858, 0, 0, 1, 0, 2, 1, 0, 1.75, 1, 0, 1.75, 0.8500000238418579, 0, 2, 0.8500000238418579, 0, 1.75, 0.699999988079071, 0, 2, 0.699999988079071, 0, 1.75, 0.550000011920929, 0, 2, 0.550000011920929, 0, 1.75, 0.4000000059604645, 0, 2, 0.4000000059604645, 0, 1.5, 1, 0, 1.5, 0.8500000238418579, 0, 1.5, 0.699999988079071, 0, 1.5, 0.550000011920929, 0, 1.5, 0.4000000059604645, 0, 1.25, 1, 0, 1.25, 0.8500000238418579, 0, 1.25, 0.699999988079071, 0, 1.25, 0.550000011920929, 0, 1.25, 0.4000000059604645, 0, 1, 1, 0, 1, 0.8500000238418579, 0, 1, 0.699999988079071, 0, 1, 0.550000011920929, 0, 1, 0.4000000059604645, 0, 1, 1, 0, 0.75, 1, 0, 0.75, 0.8500000238418579, 0, 1, 0.8500000238418579, 0, 0.75, 0.699999988079071, 0, 1, 0.699999988079071, 0, 0.75, 0.550000011920929, 0, 1, 0.550000011920929, 0, 0.75, 0.4000000059604645, 0, 1, 0.4000000059604645, 0, 0.5, 1, 0, 0.5, 0.8500000238418579, 0, 0.5, 0.699999988079071, 0, 0.5, 0.550000011920929, 0, 0.5, 0.4000000059604645, 0, 0.25, 1, 0, 0.25, 0.8500000238418579, 0, 0.25, 0.699999988079071, 0, 0.25, 0.550000011920929, 0, 0.25, 0.4000000059604645, 0, 0, 1, 0, 0, 0.8500000238418579, 0, 0, 0.699999988079071, 0, 0, 0.550000011920929, 0, 0, 0.4000000059604645, 0, 2, 1, 0, 1.75, 1, 0, 1.75, 0.8500000238418579, 0, 2, 0.8500000238418579, 0, 1.75, 0.699999988079071, 0, 2, 0.699999988079071, 0, 1.75, 0.550000011920929, 0, 2, 0.550000011920929, 0, 1.75, 0.4000000059604645, 0, 2, 0.4000000059604645, 0, 1.5, 1, 0, 1.5, 0.8500000238418579, 0, 1.5, 0.699999988079071, 0, 1.5, 0.550000011920929, 0, 1.5, 0.4000000059604645, 0, 1.25, 1, 0, 1.25, 0.8500000238418579, 0, 1.25, 0.699999988079071, 0, 1.25, 0.550000011920929, 0, 1.25, 0.4000000059604645, 0, 1, 1, 0, 1, 0.8500000238418579, 0, 1, 0.699999988079071, 0, 1, 0.550000011920929, 0, 1, 0.4000000059604645, 0, 1, 1, 0, 0.75, 1, 0, 0.75, 0.8500000238418579, 0, 1, 0.8500000238418579, 0, 0.75, 0.699999988079071, 0, 1, 0.699999988079071, 0, 0.75, 0.550000011920929, 0, 1, 0.550000011920929, 0, 0.75, 0.4000000059604645, 0, 1, 0.4000000059604645, 0, 0.5, 1, 0, 0.5, 0.8500000238418579, 0, 0.5, 0.699999988079071, 0, 0.5, 0.550000011920929, 0, 0.5, 0.4000000059604645, 0, 0.25, 1, 0, 0.25, 0.8500000238418579, 0, 0.25, 0.699999988079071, 0, 0.25, 0.550000011920929, 0, 0.25, 0.4000000059604645, 0, 0, 1, 0, 0, 0.8500000238418579, 0, 0, 0.699999988079071, 0, 0, 0.550000011920929, 0, 0, 0.4000000059604645, 0, 2, 0.4000000059604645, 0, 1.75, 0.4000000059604645, 0, 1.75, 0.30000001192092896, 0, 2, 0.30000001192092896, 0, 1.75, 0.20000000298023224, 0, 2, 0.20000000298023224, 0, 1.75, 0.10000000149011612, 0, 2, 0.10000000149011612, 0, 1.75, 0, 0, 2, 0, 0, 1.5, 0.4000000059604645, 0, 1.5, 0.30000001192092896, 0, 1.5, 0.20000000298023224, 0, 1.5, 0.10000000149011612, 0, 1.5, 0, 0, 1.25, 0.4000000059604645, 0, 1.25, 0.30000001192092896, 0, 1.25, 0.20000000298023224, 0, 1.25, 0.10000000149011612, 0, 1.25, 0, 0, 1, 0.4000000059604645, 0, 1, 0.30000001192092896, 0, 1, 0.20000000298023224, 0, 1, 0.10000000149011612, 0, 1, 0, 0, 1, 0.4000000059604645, 0, 0.75, 0.4000000059604645, 0, 0.75, 0.30000001192092896, 0, 1, 0.30000001192092896, 0, 0.75, 0.20000000298023224, 0, 1, 0.20000000298023224, 0, 0.75, 0.10000000149011612, 0, 1, 0.10000000149011612, 0, 0.75, 0, 0, 1, 0, 0, 0.5, 0.4000000059604645, 0, 0.5, 0.30000001192092896, 0, 0.5, 0.20000000298023224, 0, 0.5, 0.10000000149011612, 0, 0.5, 0, 0, 0.25, 0.4000000059604645, 0, 0.25, 0.30000001192092896, 0, 0.25, 0.20000000298023224, 0, 0.25, 0.10000000149011612, 0, 0.25, 0, 0, 0, 0.4000000059604645, 0, 0, 0.30000001192092896, 0, 0, 0.20000000298023224, 0, 0, 0.10000000149011612, 0, 0, 0, 0, 2, 0.4000000059604645, 0, 1.75, 0.4000000059604645, 0, 1.75, 0.30000001192092896, 0, 2, 0.30000001192092896, 0, 1.75, 0.20000000298023224, 0, 2, 0.20000000298023224, 0, 1.75, 0.10000000149011612, 0, 2, 0.10000000149011612, 0, 1.75, 0, 0, 2, 0, 0, 1.5, 0.4000000059604645, 0, 1.5, 0.30000001192092896, 0, 1.5, 0.20000000298023224, 0, 1.5, 0.10000000149011612, 0, 1.5, 0, 0, 1.25, 0.4000000059604645, 0, 1.25, 0.30000001192092896, 0, 1.25, 0.20000000298023224, 0, 1.25, 0.10000000149011612, 0, 1.25, 0, 0, 1, 0.4000000059604645, 0, 1, 0.30000001192092896, 0, 1, 0.20000000298023224, 0, 1, 0.10000000149011612, 0, 1, 0, 0, 1, 0.4000000059604645, 0, 0.75, 0.4000000059604645, 0, 0.75, 0.30000001192092896, 0, 1, 0.30000001192092896, 0, 0.75, 0.20000000298023224, 0, 1, 0.20000000298023224, 0, 0.75, 0.10000000149011612, 0, 1, 0.10000000149011612, 0, 0.75, 0, 0, 1, 0, 0, 0.5, 0.4000000059604645, 0, 0.5, 0.30000001192092896, 0, 0.5, 0.20000000298023224, 0, 0.5, 0.10000000149011612, 0, 0.5, 0, 0, 0.25, 0.4000000059604645, 0, 0.25, 0.30000001192092896, 0, 0.25, 0.20000000298023224, 0, 0.25, 0.10000000149011612, 0, 0.25, 0, 0, 0, 0.4000000059604645, 0, 0, 0.30000001192092896, 0, 0, 0.20000000298023224, 0, 0, 0.10000000149011612, 0, 0, 0, 0, 1, 1, 0, 0.875, 1, 0, 0.875, 0.875, 0, 1, 0.875, 0, 0.875, 0.75, 0, 1, 0.75, 0, 0.875, 0.625, 0, 1, 0.625, 0, 0.875, 0.5, 0, 1, 0.5, 0, 0.75, 1, 0, 0.75, 0.875, 0, 0.75, 0.75, 0, 0.75, 0.625, 0, 0.75, 0.5, 0, 0.625, 1, 0, 0.625, 0.875, 0, 0.625, 0.75, 0, 0.625, 0.625, 0, 0.625, 0.5, 0, 0.5, 1, 0, 0.5, 0.875, 0, 0.5, 0.75, 0, 0.5, 0.625, 0, 0.5, 0.5, 0, 0.5, 1, 0, 0.375, 1, 0, 0.375, 0.875, 0, 0.5, 0.875, 0, 0.375, 0.75, 0, 0.5, 0.75, 0, 0.375, 0.625, 0, 0.5, 0.625, 0, 0.375, 0.5, 0, 0.5, 0.5, 0, 0.25, 1, 0, 0.25, 0.875, 0, 0.25, 0.75, 0, 0.25, 0.625, 0, 0.25, 0.5, 0, 0.125, 1, 0, 0.125, 0.875, 0, 0.125, 0.75, 0, 0.125, 0.625, 0, 0.125, 0.5, 0, 0, 1, 0, 0, 0.875, 0, 0, 0.75, 0, 0, 0.625, 0, 0, 0.5, 0, 1, 0.5, 0, 0.875, 0.5, 0, 0.875, 0.375, 0, 1, 0.375, 0, 0.875, 0.25, 0, 1, 0.25, 0, 0.875, 0.125, 0, 1, 0.125, 0, 0.875, 0, 0, 1, 0, 0, 0.75, 0.5, 0, 0.75, 0.375, 0, 0.75, 0.25, 0, 0.75, 0.125, 0, 0.75, 0, 0, 0.625, 0.5, 0, 0.625, 0.375, 0, 0.625, 0.25, 0, 0.625, 0.125, 0, 0.625, 0, 0, 0.5, 0.5, 0, 0.5, 0.375, 0, 0.5, 0.25, 0, 0.5, 0.125, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0.375, 0.5, 0, 0.375, 0.375, 0, 0.5, 0.375, 0, 0.375, 0.25, 0, 0.5, 0.25, 0, 0.375, 0.125, 0, 0.5, 0.125, 0, 0.375, 0, 0, 0.5, 0, 0, 0.25, 0.5, 0, 0.25, 0.375, 0, 0.25, 0.25, 0, 0.25, 0.125, 0, 0.25, 0, 0, 0.125, 0.5, 0, 0.125, 0.375, 0, 0.125, 0.25, 0, 0.125, 0.125, 0, 0.125, 0, 0, 0, 0.5, 0, 0, 0.375, 0, 0, 0.25, 0, 0, 0.125, 0, 0, 0, 0, 0.5, 0, 0, 0.625, 0, 0, 0.625, 0.22499999403953552, 0, 0.5, 0.22499999403953552, 0, 0.625, 0.44999998807907104, 0, 0.5, 0.44999998807907104, 0, 0.625, 0.675000011920929, 0, 0.5, 0.675000011920929, 0, 0.625, 0.8999999761581421, 0, 0.5, 0.8999999761581421, 0, 0.75, 0, 0, 0.75, 0.22499999403953552, 0, 0.75, 0.44999998807907104, 0, 0.75, 0.675000011920929, 0, 0.75, 0.8999999761581421, 0, 0.875, 0, 0, 0.875, 0.22499999403953552, 0, 0.875, 0.44999998807907104, 0, 0.875, 0.675000011920929, 0, 0.875, 0.8999999761581421, 0, 1, 0, 0, 1, 0.22499999403953552, 0, 1, 0.44999998807907104, 0, 1, 0.675000011920929, 0, 1, 0.8999999761581421, 0, 0, 0, 0, 0.125, 0, 0, 0.125, 0.22499999403953552, 0, 0, 0.22499999403953552, 0, 0.125, 0.44999998807907104, 0, 0, 0.44999998807907104, 0, 0.125, 0.675000011920929, 0, 0, 0.675000011920929, 0, 0.125, 0.8999999761581421, 0, 0, 0.8999999761581421, 0, 0.25, 0, 0, 0.25, 0.22499999403953552, 0, 0.25, 0.44999998807907104, 0, 0.25, 0.675000011920929, 0, 0.25, 0.8999999761581421, 0, 0.375, 0, 0, 0.375, 0.22499999403953552, 0, 0.375, 0.44999998807907104, 0, 0.375, 0.675000011920929, 0, 0.375, 0.8999999761581421, 0, 0.5, 0, 0, 0.5, 0.22499999403953552, 0, 0.5, 0.44999998807907104, 0, 0.5, 0.675000011920929, 0, 0.5, 0.8999999761581421, 0, 0.5, 0.8999999761581421, 0, 0.625, 0.8999999761581421, 0, 0.625, 0.925000011920929, 0, 0.5, 0.925000011920929, 0, 0.625, 0.949999988079071, 0, 0.5, 0.949999988079071, 0, 0.625, 0.9750000238418579, 0, 0.5, 0.9750000238418579, 0, 0.625, 1, 0, 0.5, 1, 0, 0.75, 0.8999999761581421, 0, 0.75, 0.925000011920929, 0, 0.75, 0.949999988079071, 0, 0.75, 0.9750000238418579, 0, 0.75, 1, 0, 0.875, 0.8999999761581421, 0, 0.875, 0.925000011920929, 0, 0.875, 0.949999988079071, 0, 0.875, 0.9750000238418579, 0, 0.875, 1, 0, 1, 0.8999999761581421, 0, 1, 0.925000011920929, 0, 1, 0.949999988079071, 0, 1, 0.9750000238418579, 0, 1, 1, 0, 0, 0.8999999761581421, 0, 0.125, 0.8999999761581421, 0, 0.125, 0.925000011920929, 0, 0, 0.925000011920929, 0, 0.125, 0.949999988079071, 0, 0, 0.949999988079071, 0, 0.125, 0.9750000238418579, 0, 0, 0.9750000238418579, 0, 0.125, 1, 0, 0, 1, 0, 0.25, 0.8999999761581421, 0, 0.25, 0.925000011920929, 0, 0.25, 0.949999988079071, 0, 0.25, 0.9750000238418579, 0, 0.25, 1, 0, 0.375, 0.8999999761581421, 0, 0.375, 0.925000011920929, 0, 0.375, 0.949999988079071, 0, 0.375, 0.9750000238418579, 0, 0.375, 1, 0, 0.5, 0.8999999761581421, 0, 0.5, 0.925000011920929, 0, 0.5, 0.949999988079071, 0, 0.5, 0.9750000238418579, 0, 0.5, 1, 0, 1, 1, 0, 0.875, 1, 0, 0.875, 0.75, 0, 1, 0.75, 0, 0.875, 0.5, 0, 1, 0.5, 0, 0.875, 0.25, 0, 1, 0.25, 0, 0.875, 0, 0, 1, 0, 0, 0.75, 1, 0, 0.75, 0.75, 0, 0.75, 0.5, 0, 0.75, 0.25, 0, 0.75, 0, 0, 0.625, 1, 0, 0.625, 0.75, 0, 0.625, 0.5, 0, 0.625, 0.25, 0, 0.625, 0, 0, 0.5, 1, 0, 0.5, 0.75, 0, 0.5, 0.5, 0, 0.5, 0.25, 0, 0.5, 0, 0, 0.5, 1, 0, 0.375, 1, 0, 0.375, 0.75, 0, 0.5, 0.75, 0, 0.375, 0.5, 0, 0.5, 0.5, 0, 0.375, 0.25, 0, 0.5, 0.25, 0, 0.375, 0, 0, 0.5, 0, 0, 0.25, 1, 0, 0.25, 0.75, 0, 0.25, 0.5, 0, 0.25, 0.25, 0, 0.25, 0, 0, 0.125, 1, 0, 0.125, 0.75, 0, 0.125, 0.5, 0, 0.125, 0.25, 0, 0.125, 0, 0, 0, 1, 0, 0, 0.75, 0, 0, 0.5, 0, 0, 0.25, 0, 0, 0, 0, 1, 1, 0, 0.875, 1, 0, 0.875, 0.75, 0, 1, 0.75, 0, 0.875, 0.5, 0, 1, 0.5, 0, 0.875, 0.25, 0, 1, 0.25, 0, 0.875, 0, 0, 1, 0, 0, 0.75, 1, 0, 0.75, 0.75, 0, 0.75, 0.5, 0, 0.75, 0.25, 0, 0.75, 0, 0, 0.625, 1, 0, 0.625, 0.75, 0, 0.625, 0.5, 0, 0.625, 0.25, 0, 0.625, 0, 0, 0.5, 1, 0, 0.5, 0.75, 0, 0.5, 0.5, 0, 0.5, 0.25, 0, 0.5, 0, 0, 0.5, 1, 0, 0.375, 1, 0, 0.375, 0.75, 0, 0.5, 0.75, 0, 0.375, 0.5, 0, 0.5, 0.5, 0, 0.375, 0.25, 0, 0.5, 0.25, 0, 0.375, 0, 0, 0.5, 0, 0, 0.25, 1, 0, 0.25, 0.75, 0, 0.25, 0.5, 0, 0.25, 0.25, 0, 0.25, 0, 0, 0.125, 1, 0, 0.125, 0.75, 0, 0.125, 0.5, 0, 0.125, 0.25, 0, 0.125, 0, 0, 0, 1, 0, 0, 0.75, 0, 0, 0.5, 0, 0, 0.25, 0, 0, 0, 0, 1, 1, 0, 0.875, 1, 0, 0.875, 0.75, 0, 1, 0.75, 0, 0.875, 0.5, 0, 1, 0.5, 0, 0.875, 0.25, 0, 1, 0.25, 0, 0.875, 0, 0, 1, 0, 0, 0.75, 1, 0, 0.75, 0.75, 0, 0.75, 0.5, 0, 0.75, 0.25, 0, 0.75, 0, 0, 0.625, 1, 0, 0.625, 0.75, 0, 0.625, 0.5, 0, 0.625, 0.25, 0, 0.625, 0, 0, 0.5, 1, 0, 0.5, 0.75, 0, 0.5, 0.5, 0, 0.5, 0.25, 0, 0.5, 0, 0, 0.5, 1, 0, 0.375, 1, 0, 0.375, 0.75, 0, 0.5, 0.75, 0, 0.375, 0.5, 0, 0.5, 0.5, 0, 0.375, 0.25, 0, 0.5, 0.25, 0, 0.375, 0, 0, 0.5, 0, 0, 0.25, 1, 0, 0.25, 0.75, 0, 0.25, 0.5, 0, 0.25, 0.25, 0, 0.25, 0, 0, 0.125, 1, 0, 0.125, 0.75, 0, 0.125, 0.5, 0, 0.125, 0.25, 0, 0.125, 0, 0, 0, 1, 0, 0, 0.75, 0, 0, 0.5, 0, 0, 0.25, 0, 0, 0, 0, 1, 1, 0, 0.875, 1, 0, 0.875, 0.75, 0, 1, 0.75, 0, 0.875, 0.5, 0, 1, 0.5, 0, 0.875, 0.25, 0, 1, 0.25, 0, 0.875, 0, 0, 1, 0, 0, 0.75, 1, 0, 0.75, 0.75, 0, 0.75, 0.5, 0, 0.75, 0.25, 0, 0.75, 0, 0, 0.625, 1, 0, 0.625, 0.75, 0, 0.625, 0.5, 0, 0.625, 0.25, 0, 0.625, 0, 0, 0.5, 1, 0, 0.5, 0.75, 0, 0.5, 0.5, 0, 0.5, 0.25, 0, 0.5, 0, 0, 0.5, 1, 0, 0.375, 1, 0, 0.375, 0.75, 0, 0.5, 0.75, 0, 0.375, 0.5, 0, 0.5, 0.5, 0, 0.375, 0.25, 0, 0.5, 0.25, 0, 0.375, 0, 0, 0.5, 0, 0, 0.25, 1, 0, 0.25, 0.75, 0, 0.25, 0.5, 0, 0.25, 0.25, 0, 0.25, 0, 0, 0.125, 1, 0, 0.125, 0.75, 0, 0.125, 0.5, 0, 0.125, 0.25, 0, 0.125, 0, 0, 0, 1, 0, 0, 0.75, 0, 0, 0.5, 0, 0, 0.25, 0, 0, 0, 0
  };
  // mirror texture coordinates
  int nTexCoords = sizeof(texCoords) / sizeof(GLfloat);
  for (int i = 1; i < nTexCoords; i += 3) {
    texCoords[i] = 2.f - texCoords[i];
  }

  // define indices (1024 triangles)
  const GLuint indices[] = {
      0, 1, 2, 2, 3, 0, 3, 2, 4, 4, 5, 3, 5, 4, 6, 6, 7, 5, 7, 6, 8, 8, 9, 7, 1, 10, 11, 11, 2, 1, 2, 11, 12, 12, 4, 2, 4, 12, 13, 13, 6, 4, 6, 13, 14, 14, 8, 6, 10, 15, 16, 16, 11, 10, 11, 16, 17, 17, 12, 11, 12, 17, 18, 18, 13, 12, 13, 18, 19, 19, 14, 13, 15, 20, 21, 21, 16, 15, 16, 21, 22, 22, 17, 16, 17, 22, 23, 23, 18, 17, 18, 23, 24, 24, 19, 18, 25, 26, 27, 27, 28, 25, 28, 27, 29, 29, 30, 28, 30, 29, 31, 31, 32, 30, 32, 31, 33, 33, 34, 32, 26, 35, 36, 36, 27, 26, 27, 36, 37, 37, 29, 27, 29, 37, 38, 38, 31, 29, 31, 38, 39, 39, 33, 31, 35, 40, 41, 41, 36, 35, 36, 41, 42, 42, 37, 36, 37, 42, 43, 43, 38, 37, 38, 43, 44, 44, 39, 38, 40, 45, 46, 46, 41, 40, 41, 46, 47, 47, 42, 41, 42, 47, 48, 48, 43, 42, 43, 48, 49, 49, 44, 43, 50, 51, 52, 52, 53, 50, 53, 52, 54, 54, 55, 53, 55, 54, 56, 56, 57, 55, 57, 56, 58, 58, 59, 57, 51, 60, 61, 61, 52, 51, 52, 61, 62, 62, 54, 52, 54, 62, 63, 63, 56, 54, 56, 63, 64, 64, 58, 56, 60, 65, 66, 66, 61, 60, 61, 66, 67, 67, 62, 61, 62, 67, 68, 68, 63, 62, 63, 68, 69, 69, 64, 63, 65, 70, 71, 71, 66, 65, 66, 71, 72, 72, 67, 66, 67, 72, 73, 73, 68, 67, 68, 73, 74, 74, 69, 68, 75, 76, 77, 77, 78, 75, 78, 77, 79, 79, 80, 78, 80, 79, 81, 81, 82, 80, 82, 81, 83, 83, 84, 82, 76, 85, 86, 86, 77, 76, 77, 86, 87, 87, 79, 77, 79, 87, 88, 88, 81, 79, 81, 88, 89, 89, 83, 81, 85, 90, 91, 91, 86, 85, 86, 91, 92, 92, 87, 86, 87, 92, 93, 93, 88, 87, 88, 93, 94, 94, 89, 88, 90, 95, 96, 96, 91, 90, 91, 96, 97, 97, 92, 91, 92, 97, 98, 98, 93, 92, 93, 98, 99, 99, 94, 93, 100, 101, 102, 102, 103, 100, 103, 102, 104, 104, 105, 103, 105, 104, 106, 106, 107, 105, 107, 106, 108, 108, 109, 107, 101, 110, 111, 111, 102, 101, 102, 111, 112, 112, 104, 102, 104, 112, 113, 113, 106, 104, 106, 113, 114, 114, 108, 106, 110, 115, 116, 116, 111, 110, 111, 116, 117, 117, 112, 111, 112, 117, 118, 118, 113, 112, 113, 118, 119, 119, 114, 113, 115, 120, 121, 121, 116, 115, 116, 121, 122, 122, 117, 116, 117, 122, 123, 123, 118, 117, 118, 123, 124, 124, 119, 118, 125, 126, 127, 127, 128, 125, 128, 127, 129, 129, 130, 128, 130, 129, 131, 131, 132, 130, 132, 131, 133, 133, 134, 132, 126, 135, 136, 136, 127, 126, 127, 136, 137, 137, 129, 127, 129, 137, 138, 138, 131, 129, 131, 138, 139, 139, 133, 131, 135, 140, 141, 141, 136, 135, 136, 141, 142, 142, 137, 136, 137, 142, 143, 143, 138, 137, 138, 143, 144, 144, 139, 138, 140, 145, 146, 146, 141, 140, 141, 146, 147, 147, 142, 141, 142, 147, 148, 148, 143, 142, 143, 148, 149, 149, 144, 143, 150, 151, 152, 152, 153, 150, 153, 152, 154, 154, 155, 153, 155, 154, 156, 156, 157, 155, 157, 156, 158, 158, 159, 157, 151, 160, 161, 161, 152, 151, 152, 161, 162, 162, 154, 152, 154, 162, 163, 163, 156, 154, 156, 163, 164, 164, 158, 156, 160, 165, 166, 166, 161, 160, 161, 166, 167, 167, 162, 161, 162, 167, 168, 168, 163, 162, 163, 168, 169, 169, 164, 163, 165, 170, 171, 171, 166, 165, 166, 171, 172, 172, 167, 166, 167, 172, 173, 173, 168, 167, 168, 173, 174, 174, 169, 168, 175, 176, 177, 177, 178, 175, 178, 177, 179, 179, 180, 178, 180, 179, 181, 181, 182, 180, 182, 181, 183, 183, 184, 182, 176, 185, 186, 186, 177, 176, 177, 186, 187, 187, 179, 177, 179, 187, 188, 188, 181, 179, 181, 188, 189, 189, 183, 181, 185, 190, 191, 191, 186, 185, 186, 191, 192, 192, 187, 186, 187, 192, 193, 193, 188, 187, 188, 193, 194, 194, 189, 188, 190, 195, 196, 196, 191, 190, 191, 196, 197, 197, 192, 191, 192, 197, 198, 198, 193, 192, 193, 198, 199, 199, 194, 193, 200, 201, 202, 202, 203, 200, 203, 202, 204, 204, 205, 203, 205, 204, 206, 206, 207, 205, 207, 206, 208, 208, 209, 207, 201, 210, 211, 211, 202, 201, 202, 211, 212, 212, 204, 202, 204, 212, 213, 213, 206, 204, 206, 213, 214, 214, 208, 206, 210, 215, 216, 216, 211, 210, 211, 216, 217, 217, 212, 211, 212, 217, 218, 218, 213, 212, 213, 218, 219, 219, 214, 213, 215, 220, 221, 221, 216, 215, 216, 221, 222, 222, 217, 216, 217, 222, 223, 223, 218, 217, 218, 223, 224, 224, 219, 218, 225, 226, 227, 227, 228, 225, 228, 227, 229, 229, 230, 228, 230, 229, 231, 231, 232, 230, 232, 231, 233, 233, 234, 232, 226, 235, 236, 236, 227, 226, 227, 236, 237, 237, 229, 227, 229, 237, 238, 238, 231, 229, 231, 238, 239, 239, 233, 231, 235, 240, 241, 241, 236, 235, 236, 241, 242, 242, 237, 236, 237, 242, 243, 243, 238, 237, 238, 243, 244, 244, 239, 238, 240, 245, 246, 246, 241, 240, 241, 246, 247, 247, 242, 241, 242, 247, 248, 248, 243, 242, 243, 248, 249, 249, 244, 243, 250, 251, 252, 252, 253, 250, 253, 252, 254, 254, 255, 253, 255, 254, 256, 256, 257, 255, 257, 256, 258, 258, 259, 257, 251, 260, 261, 261, 252, 251, 252, 261, 262, 262, 254, 252, 254, 262, 263, 263, 256, 254, 256, 263, 264, 264, 258, 256, 260, 265, 266, 266, 261, 260, 261, 266, 267, 267, 262, 261, 262, 267, 268, 268, 263, 262, 263, 268, 269, 269, 264, 263, 265, 270, 271, 271, 266, 265, 266, 271, 272, 272, 267, 266, 267, 272, 273, 273, 268, 267, 268, 273, 274, 274, 269, 268, 275, 276, 277, 277, 278, 275, 278, 277, 279, 279, 280, 278, 280, 279, 281, 281, 282, 280, 282, 281, 283, 283, 284, 282, 276, 285, 286, 286, 277, 276, 277, 286, 287, 287, 279, 277, 279, 287, 288, 288, 281, 279, 281, 288, 289, 289, 283, 281, 285, 290, 291, 291, 286, 285, 286, 291, 292, 292, 287, 286, 287, 292, 293, 293, 288, 287, 288, 293, 294, 294, 289, 288, 290, 295, 296, 296, 291, 290, 291, 296, 297, 297, 292, 291, 292, 297, 298, 298, 293, 292, 293, 298, 299, 299, 294, 293, 300, 301, 302, 302, 303, 300, 303, 302, 304, 304, 305, 303, 305, 304, 306, 306, 307, 305, 307, 306, 308, 308, 309, 307, 301, 310, 311, 311, 302, 301, 302, 311, 312, 312, 304, 302, 304, 312, 313, 313, 306, 304, 306, 313, 314, 314, 308, 306, 310, 315, 316, 316, 311, 310, 311, 316, 317, 317, 312, 311, 312, 317, 318, 318, 313, 312, 313, 318, 319, 319, 314, 313, 315, 320, 321, 321, 316, 315, 316, 321, 322, 322, 317, 316, 317, 322, 323, 323, 318, 317, 318, 323, 324, 324, 319, 318, 325, 326, 327, 327, 328, 325, 328, 327, 329, 329, 330, 328, 330, 329, 331, 331, 332, 330, 332, 331, 333, 333, 334, 332, 326, 335, 336, 336, 327, 326, 327, 336, 337, 337, 329, 327, 329, 337, 338, 338, 331, 329, 331, 338, 339, 339, 333, 331, 335, 340, 341, 341, 336, 335, 336, 341, 342, 342, 337, 336, 337, 342, 343, 343, 338, 337, 338, 343, 344, 344, 339, 338, 340, 345, 346, 346, 341, 340, 341, 346, 347, 347, 342, 341, 342, 347, 348, 348, 343, 342, 343, 348, 349, 349, 344, 343, 350, 351, 352, 352, 353, 350, 353, 352, 354, 354, 355, 353, 355, 354, 356, 356, 357, 355, 357, 356, 358, 358, 359, 357, 351, 360, 361, 361, 352, 351, 352, 361, 362, 362, 354, 352, 354, 362, 363, 363, 356, 354, 356, 363, 364, 364, 358, 356, 360, 365, 366, 366, 361, 360, 361, 366, 367, 367, 362, 361, 362, 367, 368, 368, 363, 362, 363, 368, 369, 369, 364, 363, 365, 370, 371, 371, 366, 365, 366, 371, 372, 372, 367, 366, 367, 372, 373, 373, 368, 367, 368, 373, 374, 374, 369, 368, 375, 376, 377, 377, 378, 375, 378, 377, 379, 379, 380, 378, 380, 379, 381, 381, 382, 380, 382, 381, 383, 383, 384, 382, 376, 385, 386, 386, 377, 376, 377, 386, 387, 387, 379, 377, 379, 387, 388, 388, 381, 379, 381, 388, 389, 389, 383, 381, 385, 390, 391, 391, 386, 385, 386, 391, 392, 392, 387, 386, 387, 392, 393, 393, 388, 387, 388, 393, 394, 394, 389, 388, 390, 395, 396, 396, 391, 390, 391, 396, 397, 397, 392, 391, 392, 397, 398, 398, 393, 392, 393, 398, 399, 399, 394, 393, 400, 401, 402, 402, 403, 400, 403, 402, 404, 404, 405, 403, 405, 404, 406, 406, 407, 405, 407, 406, 408, 408, 409, 407, 401, 410, 411, 411, 402, 401, 402, 411, 412, 412, 404, 402, 404, 412, 413, 413, 406, 404, 406, 413, 414, 414, 408, 406, 410, 415, 416, 416, 411, 410, 411, 416, 417, 417, 412, 411, 412, 417, 418, 418, 413, 412, 413, 418, 419, 419, 414, 413, 415, 420, 421, 421, 416, 415, 416, 421, 422, 422, 417, 416, 417, 422, 423, 423, 418, 417, 418, 423, 424, 424, 419, 418, 425, 426, 427, 427, 428, 425, 428, 427, 429, 429, 430, 428, 430, 429, 431, 431, 432, 430, 432, 431, 433, 433, 434, 432, 426, 435, 436, 436, 427, 426, 427, 436, 437, 437, 429, 427, 429, 437, 438, 438, 431, 429, 431, 438, 439, 439, 433, 431, 435, 440, 441, 441, 436, 435, 436, 441, 442, 442, 437, 436, 437, 442, 443, 443, 438, 437, 438, 443, 444, 444, 439, 438, 440, 445, 446, 446, 441, 440, 441, 446, 447, 447, 442, 441, 442, 447, 448, 448, 443, 442, 443, 448, 449, 449, 444, 443, 450, 451, 452, 452, 453, 450, 453, 452, 454, 454, 455, 453, 455, 454, 456, 456, 457, 455, 457, 456, 458, 458, 459, 457, 451, 460, 461, 461, 452, 451, 452, 461, 462, 462, 454, 452, 454, 462, 463, 463, 456, 454, 456, 463, 464, 464, 458, 456, 460, 465, 466, 466, 461, 460, 461, 466, 467, 467, 462, 461, 462, 467, 468, 468, 463, 462, 463, 468, 469, 469, 464, 463, 465, 470, 471, 471, 466, 465, 466, 471, 472, 472, 467, 466, 467, 472, 473, 473, 468, 467, 468, 473, 474, 474, 469, 468, 475, 476, 477, 477, 478, 475, 478, 477, 479, 479, 480, 478, 480, 479, 481, 481, 482, 480, 482, 481, 483, 483, 484, 482, 476, 485, 486, 486, 477, 476, 477, 486, 487, 487, 479, 477, 479, 487, 488, 488, 481, 479, 481, 488, 489, 489, 483, 481, 485, 490, 491, 491, 486, 485, 486, 491, 492, 492, 487, 486, 487, 492, 493, 493, 488, 487, 488, 493, 494, 494, 489, 488, 490, 495, 496, 496, 491, 490, 491, 496, 497, 497, 492, 491, 492, 497, 498, 498, 493, 492, 493, 498, 499, 499, 494, 493, 500, 501, 502, 502, 503, 500, 503, 502, 504, 504, 505, 503, 505, 504, 506, 506, 507, 505, 507, 506, 508, 508, 509, 507, 501, 510, 511, 511, 502, 501, 502, 511, 512, 512, 504, 502, 504, 512, 513, 513, 506, 504, 506, 513, 514, 514, 508, 506, 510, 515, 516, 516, 511, 510, 511, 516, 517, 517, 512, 511, 512, 517, 518, 518, 513, 512, 513, 518, 519, 519, 514, 513, 515, 520, 521, 521, 516, 515, 516, 521, 522, 522, 517, 516, 517, 522, 523, 523, 518, 517, 518, 523, 524, 524, 519, 518, 525, 526, 527, 527, 528, 525, 528, 527, 529, 529, 530, 528, 530, 529, 531, 531, 532, 530, 532, 531, 533, 533, 534, 532, 526, 535, 536, 536, 527, 526, 527, 536, 537, 537, 529, 527, 529, 537, 538, 538, 531, 529, 531, 538, 539, 539, 533, 531, 535, 540, 541, 541, 536, 535, 536, 541, 542, 542, 537, 536, 537, 542, 543, 543, 538, 537, 538, 543, 544, 544, 539, 538, 540, 545, 546, 546, 541, 540, 541, 546, 547, 547, 542, 541, 542, 547, 548, 548, 543, 542, 543, 548, 549, 549, 544, 543, 550, 551, 552, 552, 553, 550, 553, 552, 554, 554, 555, 553, 555, 554, 556, 556, 557, 555, 557, 556, 558, 558, 559, 557, 551, 560, 561, 561, 552, 551, 552, 561, 562, 562, 554, 552, 554, 562, 563, 563, 556, 554, 556, 563, 564, 564, 558, 556, 560, 565, 566, 566, 561, 560, 561, 566, 567, 567, 562, 561, 562, 567, 568, 568, 563, 562, 563, 568, 569, 569, 564, 563, 565, 570, 571, 571, 566, 565, 566, 571, 572, 572, 567, 566, 567, 572, 573, 573, 568, 567, 568, 573, 574, 574, 569, 568, 575, 576, 577, 577, 578, 575, 578, 577, 579, 579, 580, 578, 580, 579, 581, 581, 582, 580, 582, 581, 583, 583, 584, 582, 576, 585, 586, 586, 577, 576, 577, 586, 587, 587, 579, 577, 579, 587, 588, 588, 581, 579, 581, 588, 589, 589, 583, 581, 585, 590, 591, 591, 586, 585, 586, 591, 592, 592, 587, 586, 587, 592, 593, 593, 588, 587, 588, 593, 594, 594, 589, 588, 590, 595, 596, 596, 591, 590, 591, 596, 597, 597, 592, 591, 592, 597, 598, 598, 593, 592, 593, 598, 599, 599, 594, 593, 600, 601, 602, 602, 603, 600, 603, 602, 604, 604, 605, 603, 605, 604, 606, 606, 607, 605, 607, 606, 608, 608, 609, 607, 601, 610, 611, 611, 602, 601, 602, 611, 612, 612, 604, 602, 604, 612, 613, 613, 606, 604, 606, 613, 614, 614, 608, 606, 610, 615, 616, 616, 611, 610, 611, 616, 617, 617, 612, 611, 612, 617, 618, 618, 613, 612, 613, 618, 619, 619, 614, 613, 615, 620, 621, 621, 616, 615, 616, 621, 622, 622, 617, 616, 617, 622, 623, 623, 618, 617, 618, 623, 624, 624, 619, 618, 625, 626, 627, 627, 628, 625, 628, 627, 629, 629, 630, 628, 630, 629, 631, 631, 632, 630, 632, 631, 633, 633, 634, 632, 626, 635, 636, 636, 627, 626, 627, 636, 637, 637, 629, 627, 629, 637, 638, 638, 631, 629, 631, 638, 639, 639, 633, 631, 635, 640, 641, 641, 636, 635, 636, 641, 642, 642, 637, 636, 637, 642, 643, 643, 638, 637, 638, 643, 644, 644, 639, 638, 640, 645, 646, 646, 641, 640, 641, 646, 647, 647, 642, 641, 642, 647, 648, 648, 643, 642, 643, 648, 649, 649, 644, 643, 650, 651, 652, 652, 653, 650, 653, 652, 654, 654, 655, 653, 655, 654, 656, 656, 657, 655, 657, 656, 658, 658, 659, 657, 651, 660, 661, 661, 652, 651, 652, 661, 662, 662, 654, 652, 654, 662, 663, 663, 656, 654, 656, 663, 664, 664, 658, 656, 660, 665, 666, 666, 661, 660, 661, 666, 667, 667, 662, 661, 662, 667, 668, 668, 663, 662, 663, 668, 669, 669, 664, 663, 665, 670, 671, 671, 666, 665, 666, 671, 672, 672, 667, 666, 667, 672, 673, 673, 668, 667, 668, 673, 674, 674, 669, 668, 675, 676, 677, 677, 678, 675, 678, 677, 679, 679, 680, 678, 680, 679, 681, 681, 682, 680, 682, 681, 683, 683, 684, 682, 676, 685, 686, 686, 677, 676, 677, 686, 687, 687, 679, 677, 679, 687, 688, 688, 681, 679, 681, 688, 689, 689, 683, 681, 685, 690, 691, 691, 686, 685, 686, 691, 692, 692, 687, 686, 687, 692, 693, 693, 688, 687, 688, 693, 694, 694, 689, 688, 690, 695, 696, 696, 691, 690, 691, 696, 697, 697, 692, 691, 692, 697, 698, 698, 693, 692, 693, 698, 699, 699, 694, 693, 700, 701, 702, 702, 703, 700, 703, 702, 704, 704, 705, 703, 705, 704, 706, 706, 707, 705, 707, 706, 708, 708, 709, 707, 701, 710, 711, 711, 702, 701, 702, 711, 712, 712, 704, 702, 704, 712, 713, 713, 706, 704, 706, 713, 714, 714, 708, 706, 710, 715, 716, 716, 711, 710, 711, 716, 717, 717, 712, 711, 712, 717, 718, 718, 713, 712, 713, 718, 719, 719, 714, 713, 715, 720, 721, 721, 716, 715, 716, 721, 722, 722, 717, 716, 717, 722, 723, 723, 718, 717, 718, 723, 724, 724, 719, 718, 725, 726, 727, 727, 728, 725, 728, 727, 729, 729, 730, 728, 730, 729, 731, 731, 732, 730, 732, 731, 733, 733, 734, 732, 726, 735, 736, 736, 727, 726, 727, 736, 737, 737, 729, 727, 729, 737, 738, 738, 731, 729, 731, 738, 739, 739, 733, 731, 735, 740, 741, 741, 736, 735, 736, 741, 742, 742, 737, 736, 737, 742, 743, 743, 738, 737, 738, 743, 744, 744, 739, 738, 740, 745, 746, 746, 741, 740, 741, 746, 747, 747, 742, 741, 742, 747, 748, 748, 743, 742, 743, 748, 749, 749, 744, 743, 750, 751, 752, 752, 753, 750, 753, 752, 754, 754, 755, 753, 755, 754, 756, 756, 757, 755, 757, 756, 758, 758, 759, 757, 751, 760, 761, 761, 752, 751, 752, 761, 762, 762, 754, 752, 754, 762, 763, 763, 756, 754, 756, 763, 764, 764, 758, 756, 760, 765, 766, 766, 761, 760, 761, 766, 767, 767, 762, 761, 762, 767, 768, 768, 763, 762, 763, 768, 769, 769, 764, 763, 765, 770, 771, 771, 766, 765, 766, 771, 772, 772, 767, 766, 767, 772, 773, 773, 768, 767, 768, 773, 774, 774, 769, 768, 775, 776, 777, 777, 778, 775, 778, 777, 779, 779, 780, 778, 780, 779, 781, 781, 782, 780, 782, 781, 783, 783, 784, 782, 776, 785, 786, 786, 777, 776, 777, 786, 787, 787, 779, 777, 779, 787, 788, 788, 781, 779, 781, 788, 789, 789, 783, 781, 785, 790, 791, 791, 786, 785, 786, 791, 792, 792, 787, 786, 787, 792, 793, 793, 788, 787, 788, 793, 794, 794, 789, 788, 790, 795, 796, 796, 791, 790, 791, 796, 797, 797, 792, 791, 792, 797, 798, 798, 793, 792, 793, 798, 799, 799, 794, 793
  };
  int nIndices = sizeof(indices) / sizeof(GLuint);
  int nTriangles = nIndices / 3;

  GLfloat* verticesFlat = new GLfloat[9 * nTriangles];
  GLfloat* normalsFlat = new GLfloat[9 * nTriangles];
  GLfloat* texCoordsFlat = new GLfloat[9 * nTriangles];

  for (int i = 0; i < nTriangles; ++i) {
    for (int j = 0; j < 3; ++j) {     // 3 vertices per triangle
      for (int k = 0; k < 3; ++k) {   // 3 coordinates per vertex
        verticesFlat[3 * (3 * i + j) + k] = vertices[3 * indices[3 * i + j] + k];
        texCoordsFlat[3 * (3 * i + j) + k] = texCoords[3 * indices[3 * i + j] + k];
      }
    }
    // compute normal
    glm::vec3 v1 = glm::make_vec3(&(verticesFlat[3 * (3 * i + 0)]));
    glm::vec3 v2 = glm::make_vec3(&(verticesFlat[3 * (3 * i + 1)]));
    glm::vec3 v3 = glm::make_vec3(&(verticesFlat[3 * (3 * i + 2)]));
    glm::vec3 normal = glm::cross(v2 - v1, v3 - v1);
    if (glm::length(normal) > FLT_EPSILON) {    // model contains degenerate traingles
      glm::normalize(normal);
    }
    for (int j = 0; j < 3; ++j) {     // 3 normals per triangle
      normalsFlat[3 * (3 * i + j) + 0] = normal.x;
      normalsFlat[3 * (3 * i + j) + 1] = normal.y;
      normalsFlat[3 * (3 * i + j) + 2] = normal.z;
    }
  }

  core->addAttributeData(OGLConstants::VERTEX.location, verticesFlat,
      9 * nTriangles * sizeof(GLfloat), 3, GL_STATIC_DRAW);

  core->addAttributeData(OGLConstants::NORMAL.location, normalsFlat,
      9 * nTriangles * sizeof(GLfloat), 3, GL_STATIC_DRAW);

  core->addAttributeData(OGLConstants::TEX_COORD_0.location, texCoordsFlat,
      9 * nTriangles * sizeof(GLfloat), 3, GL_STATIC_DRAW);

  delete [] verticesFlat;
  verticesFlat = nullptr;
  delete [] normalsFlat;
  normalsFlat = nullptr;
  delete [] texCoordsFlat;
  texCoordsFlat = nullptr;

  return core;
}


GeometryCoreSP GeometryCoreFactory::createXYZAxes(GLfloat size) {
  // create geometry core
  auto core = GeometryCore::create(GL_LINES, DrawMode::ARRAYS);

  // define vertices (6 vertices for 3 axes)
  GLfloat negSize = 0.2f * size;
  GLfloat posSize = 0.8f * size;
  const GLfloat vertices[] = {
      -negSize,  0.0f,     0.0f,   // x axis
       posSize,  0.0f,     0.0f,
       0.0f,    -negSize,  0.0f,     // y axis
       0.0f,     posSize,  0.0f,
       0.0f,     0.0f,    -negSize,  // z axis
       0.0f,     0.0f,     posSize
  };
  core->addAttributeData(OGLConstants::VERTEX.location, vertices,
      sizeof(vertices), 3, GL_STATIC_DRAW);

  // define vertex colors
  const GLfloat colors[] = {
      0.8f, 0.0f, 0.0f,
      0.8f, 0.0f, 0.0f,
      0.0f, 0.8f, 0.0f,
      0.0f, 0.8f, 0.0f,
      0.0f, 0.0f, 0.8f,
      0.0f, 0.0f, 0.8f
  };
  core->addAttributeData(OGLConstants::COLOR.location, colors,
      sizeof(colors), 3, GL_STATIC_DRAW);

  return core;
}


GeometryCoreSP GeometryCoreFactory::createRGBCube(GLfloat size) {
  // create geometry core
  auto core = GeometryCore::create(GL_TRIANGLES, DrawMode::ELEMENTS);

  // define vertices (cube volume = size x size x size,
  //   8 vertices with indices 0,...,7)
  //               7-----6
  //     y        /|    /|
  //     |       3-----2 |
  //     0-- x   | |   | |
  //    /        | 4---|-5
  //   z         |/    |/
  //             0-----1
  GLfloat halfSize = 0.5f * size;
  const GLfloat vertices[] = {
      -halfSize, -halfSize,  halfSize,
       halfSize, -halfSize,  halfSize,
       halfSize,  halfSize,  halfSize,
      -halfSize,  halfSize,  halfSize,
      -halfSize, -halfSize, -halfSize,
       halfSize, -halfSize, -halfSize,
       halfSize,  halfSize, -halfSize,
      -halfSize,  halfSize, -halfSize
  };
  core->addAttributeData(OGLConstants::VERTEX.location, vertices,
      sizeof(vertices), 3, GL_STATIC_DRAW);

  // define vertex colors
  const GLfloat colors[] = {
      0.0f, 0.0f,  1.0f,
      1.0f, 0.0f,  1.0f,
      1.0f, 1.0f,  1.0f,
      0.0f, 1.0f,  1.0f,
      0.0f, 0.0f,  0.0f,
      1.0f, 0.0f,  0.0f,
      1.0f, 1.0f,  0.0f,
      0.0f, 1.0f,  0.0f
  };
  core->addAttributeData(OGLConstants::COLOR.location, colors,
      sizeof(colors), 3, GL_STATIC_DRAW);

  // define indices (6 faces * 2 triangles -> 12 triangles)
  const GLuint indices[] = {
      0, 1, 3,  // front face
      1, 2, 3,
      5, 4, 6,  // rear face
      4, 7, 6,
      4, 0, 7,  // left face
      0, 3, 7,
      1, 5, 2,  // right face
      5, 6, 2,
      3, 2, 7,  // top face
      2, 6, 7,
      4, 5, 0,  // bottom face
      5, 1, 0
  };
  core->setElementIndexData(indices, sizeof(indices), GL_STATIC_DRAW);

  return core;
}


int GeometryCoreFactory::loadOBJFile_(const std::string& fileName, OBJModel& model) const {

  int error = 0;

  do {
    // try to find file
    std::string fullFileName = getFullFileName(filePaths_, fileName);
    if (fullFileName.empty()) {
      error = 1;
      break;
    }
    std::ifstream istr(fullFileName);
    if (!istr.is_open()) {
      error = 1;
      break;
    }

    // read OBJ file
    std::string line;
    while (std::getline(istr, line)) {
      if (line.empty()) {
        continue;
      }
      std::stringstream stream(line);
      std::string type;
      stream >> type;
      assert(stream.good() || stream.eof());
      if (type == "v") {
        glm::vec3 vertex;
        stream >> vertex.x >> vertex.y >> vertex.z;
        assert(stream.good() || stream.eof());
        model.vertices.push_back(vertex);
      }
      else if (type == "vt") {
        glm::vec2 texCoord;
        stream >> texCoord.s >> texCoord.t;
        assert(stream.good() || stream.eof());
        model.texCoords.push_back(texCoord);
      }
      else if (type == "vn") {
        glm::vec3 normal;
        stream >> normal.x >> normal.y >> normal.z;
        assert(stream.good() || stream.eof());
        model.normals.push_back(normal);
      }
      else if (type == "f") {
        Face face;
        do {
          FaceEntry entry;
          if (!(stream >> entry.vertex)) {
            // no more vertices in face
            break;
          }
          // check for texture coordinate and/or normal
          if (stream.peek() == '/') {
            stream.ignore(1);
            // check if texture coordinate is given
            if (stream.peek() != '/') {
              stream >> entry.texCoord;
              assert(stream.good() || stream.eof());
            }
            // check for normal
            if (stream.peek() == '/') {
              stream.ignore(1);
              stream >> entry.normal;
              assert(stream.good() || stream.eof());
            }
          }
          face.entries.push_back(entry);
        } while (true);
        assert(face.entries.size() >= 3);
        face.nTriangles = face.entries.size() - 2;
        model.nVertices += face.entries.size();
        model.nTriangles += face.nTriangles;
        model.faces.push_back(face);
      }
      // ignore other OBJ elements
    }
  } while (false);

  return error;
}


} /* namespace scg */

